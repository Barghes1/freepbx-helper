from telegram import Update
from telegram.constants import ParseMode
from telegram.error import BadRequest
from telegram.ext import ContextTypes

from handlers.commands import (
    add_cmd,
    create_cmd,
    del_cmd,
    del_inbound_cmd,
    gql_fields_cmd,
    gql_mutations_cmd,
    list_cmd,
    list_routes_cmd,
    logout_cmd,
    ping_cmd,
    reconnect_cmd,
    whoami_cmd,
    add_inbound_cmd,
    goip_detect_ip_cmd,
    set_incoming_sip_cmd,
    connect_profile_by_key,
    load_profiles_for,
    save_profiles_for,
)
from ui.keyboards import (
    MENU_PREFIX,
    back_home_kb,
    ext_menu_kb,
    gql_menu_kb,
    in_menu_kb,
    main_menu_kb,
    sys_menu_kb,
    ast_menu_kb,
    servers_menu_kb,
    preset_actions_kb,
    not_connected_kb,
    
)
from ui.texts import NOT_CONNECTED
from utils.common import equip_start


# ===== helpers =====

def _is_connected(context: ContextTypes.DEFAULT_TYPE) -> bool:
    return bool(context.user_data.get("__connected"))

async def _safe_edit(q, text, **kwargs):
    try:
        return await q.edit_message_text(text, **kwargs)
    except BadRequest as e:
        if "message is not modified" in str(e).lower():
            return None
        raise

def _mk_inline(spec_rows):
    from telegram import InlineKeyboardMarkup, InlineKeyboardButton
    rows = []
    for row in spec_rows:
        rows.append([InlineKeyboardButton(b["text"], callback_data=b["data"]) for b in row])
    return InlineKeyboardMarkup(rows)

def _uid(update: Update) -> int:
    return update.effective_user.id

def _profiles(update: Update) -> dict:
    """–õ–∏—á–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return load_profiles_for(_uid(update))

async def send_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    target = update.effective_message
    await target.reply_text(
        "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>",
        parse_mode=ParseMode.HTML,
        reply_markup=main_menu_kb(),
    )

# ===== –≠–ö–†–ê–ù–´: –°–æ–∑–¥–∞–Ω–∏–µ =====

async def _ext_create_root(q, *, text_suffix: str = ""):
    txt = (
        "‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ –ª–∏–Ω–∏–π</b>\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±:\n\n"
        "‚Ä¢ –ü–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, 4 ‚Üí 401‚Ä¶)\n"
        "‚Ä¢ –û–¥–∏–Ω –Ω–æ–º–µ—Ä (EXT)\n"
        "‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω (start-end)\n"
    )
    if text_suffix:
        txt += f"\n<code>{text_suffix}</code>"
    kb = [
        [dict(text="üè≠ –ü–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é", data=f"{MENU_PREFIX}ext.create.eq")],
        [
            dict(text="1Ô∏è‚É£ –û–¥–∏–Ω –Ω–æ–º–µ—Ä", data=f"{MENU_PREFIX}ext.create.single"),
            dict(text="‚ÜîÔ∏è –î–∏–∞–ø–∞–∑–æ–Ω",    data=f"{MENU_PREFIX}ext.create.range"),
        ],
        [dict(text="üîô –ù–∞–∑–∞–¥", data=f"{MENU_PREFIX}ext")],
    ]
    await _safe_edit(q, txt, parse_mode=ParseMode.HTML, reply_markup=_mk_inline(kb))

async def _ext_create_pick_eq(q):
    txt = "üè≠ –í—ã–±–µ—Ä–∏—Ç–µ <b>–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ</b> (—Å—Ç–∞—Ä—Ç–æ–≤–∞—è –±–∞–∑–∞ EXT):"
    kb = [
        [
            dict(text="1 ‚Üí 101‚Ä¶", data=f"{MENU_PREFIX}ext.create.eq.1"),
            dict(text="2 ‚Üí 201‚Ä¶", data=f"{MENU_PREFIX}ext.create.eq.2"),
        ],
        [
            dict(text="3 ‚Üí 301‚Ä¶", data=f"{MENU_PREFIX}ext.create.eq.3"),
            dict(text="4 ‚Üí 401‚Ä¶", data=f"{MENU_PREFIX}ext.create.eq.4"),
        ],
        [dict(text="10 ‚Üí 1001‚Ä¶", data=f"{MENU_PREFIX}ext.create.eq.10")],
        [dict(text="‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –±–∞–∑—ã", data=f"{MENU_PREFIX}ext.create.eq.custom")],
        [dict(text="üîô –ù–∞–∑–∞–¥",   data=f"{MENU_PREFIX}ext.create")],
    ]
    await _safe_edit(q, txt, parse_mode=ParseMode.HTML,
                     reply_markup=_mk_inline(kb))


async def _ext_create_pick_qty(q, eq: int):
    txt = f"üì¶ –ë–∞–∑–∞ <b>{eq}</b>. –í—ã–±–µ—Ä–∏—Ç–µ <b>–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</b> –ª–∏–Ω–∏–π:"
    kb = [
        [
            dict(text="1",  data=f"{MENU_PREFIX}ext.create.eqqty.{eq}.1"),
            dict(text="5",  data=f"{MENU_PREFIX}ext.create.eqqty.{eq}.5"),
            dict(text="10", data=f"{MENU_PREFIX}ext.create.eqqty.{eq}.10"),
        ],
        [
            dict(text="20",            data=f"{MENU_PREFIX}ext.create.eqqty.{eq}.20"),
            dict(text="50",            data=f"{MENU_PREFIX}ext.create.eqqty.{eq}.50"),
            dict(text="‚úçÔ∏è –í–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ", data=f"{MENU_PREFIX}ext.create.eqqty.custom.{eq}"),
        ],
        [dict(text="üîô –ù–∞–∑–∞–¥", data=f"{MENU_PREFIX}ext.create.eq")],
    ]
    await _safe_edit(q, txt, parse_mode=ParseMode.HTML, reply_markup=_mk_inline(kb))
    
async def _ext_create_pick_qty_send(target_message, eq: int):
    txt = f"üì¶ –ë–∞–∑–∞ <b>{eq}</b>. –í—ã–±–µ—Ä–∏—Ç–µ <b>–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</b> –ª–∏–Ω–∏–π:"
    kb = [
        [
            dict(text="1",  data=f"{MENU_PREFIX}ext.create.eqqty.{eq}.1"),
            dict(text="5",  data=f"{MENU_PREFIX}ext.create.eqqty.{eq}.5"),
            dict(text="10", data=f"{MENU_PREFIX}ext.create.eqqty.{eq}.10"),
        ],
        [
            dict(text="20",            data=f"{MENU_PREFIX}ext.create.eqqty.{eq}.20"),
            dict(text="50",            data=f"{MENU_PREFIX}ext.create.eqqty.{eq}.50"),
            dict(text="‚úçÔ∏è –í–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ", data=f"{MENU_PREFIX}ext.create.eqqty.custom.{eq}"),
        ],
        [dict(text="üîô –ù–∞–∑–∞–¥", data=f"{MENU_PREFIX}ext.create.eq")],
    ]
    await target_message.reply_text(
        txt, parse_mode=ParseMode.HTML, reply_markup=_mk_inline(kb)
    )


async def _in_add_pick_eq(q):
    txt = "üè≠ –í—ã–±–µ—Ä–∏—Ç–µ <b>–±–∞–∑—É</b>, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Å–æ–∑–¥–∞—Ç—å inbound-–º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –í–°–ï–• —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö EXT (–¥–∏–∞–ø–∞–∑–æ–Ω 100 –Ω–æ–º–µ—Ä–æ–≤):"
    kb = [
        [
            dict(text="1 ‚Üí 101-199",  data=f"{MENU_PREFIX}in.add.eq.1"),
            dict(text="2 ‚Üí 201-299",  data=f"{MENU_PREFIX}in.add.eq.2"),
        ],
        [
            dict(text="3 ‚Üí 301-399",  data=f"{MENU_PREFIX}in.add.eq.3"),
            dict(text="4 ‚Üí 401-499",  data=f"{MENU_PREFIX}in.add.eq.4"),
        ],
        [dict(text="10 ‚Üí 1001-1099", data=f"{MENU_PREFIX}in.add.eq.10")],
        [dict(text="‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –±–∞–∑—ã", data=f"{MENU_PREFIX}in.add.eq.custom")],
        [dict(text="üîô –ù–∞–∑–∞–¥",        data=f"{MENU_PREFIX}in")],
    ]
    await _safe_edit(q, txt, parse_mode=ParseMode.HTML, reply_markup=_mk_inline(kb))

# ===== –≠–ö–†–ê–ù–´: –£–¥–∞–ª–µ–Ω–∏–µ =====

async def _ext_delete_root(q):
    txt = (
        "üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –ª–∏–Ω–∏–π</b>\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±:\n"
        "‚Ä¢ –£–¥–∞–ª–∏—Ç—å –ø–æ –Ω–æ–º–µ—Ä–∞–º/–¥–∏–∞–ø–∞–∑–æ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 401 402 410-418)\n"
        "‚Ä¢ –£–¥–∞–ª–∏—Ç—å –≤—Å–µ 100 –Ω–æ–º–µ—Ä–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –±–∞–∑—ã (1‚Üí101‚Ä¶, 4‚Üí401‚Ä¶ –∏ —Ç.–¥.)\n"
        "‚Ä¢ –£–¥–∞–ª–∏—Ç—å –í–°–Å (–≤—Å–µ EXT)\n"
    )
    kb = [
        [dict(text="üî¢ –£–¥–∞–ª–∏—Ç—å –Ω–æ–º–µ—Ä–∞/–¥–∏–∞–ø–∞–∑–æ–Ω", data=f"{MENU_PREFIX}ext.del.numbers")],
        [dict(text="üè≠ –£–¥–∞–ª–∏—Ç—å –ø–æ –±–∞–∑–µ",         data=f"{MENU_PREFIX}ext.del.eq")],
        [dict(text="üß® –£–¥–∞–ª–∏—Ç—å –í–°–Å",             data=f"{MENU_PREFIX}ext.del_all")],
        [dict(text="üîô –ù–∞–∑–∞–¥",                   data=f"{MENU_PREFIX}ext")],
    ]
    await _safe_edit(q, txt, parse_mode=ParseMode.HTML, reply_markup=_mk_inline(kb))

async def _ext_delete_pick_eq(q):
    txt = "üè≠ –í—ã–±–µ—Ä–∏—Ç–µ <b>–±–∞–∑—É</b> –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –µ—ë –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (100 –Ω–æ–º–µ—Ä–æ–≤):"
    kb = [
        [
            dict(text="1 ‚Üí 101-199",  data=f"{MENU_PREFIX}ext.del.eq.1"),
            dict(text="2 ‚Üí 201-299",  data=f"{MENU_PREFIX}ext.del.eq.2"),
        ],
        [
            dict(text="3 ‚Üí 301-399",  data=f"{MENU_PREFIX}ext.del.eq.3"),
            dict(text="4 ‚Üí 401-499",  data=f"{MENU_PREFIX}ext.del.eq.4"),
        ],
        [dict(text="10 ‚Üí 1001-1099", data=f"{MENU_PREFIX}ext.del.eq.10")],
        [dict(text="‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –±–∞–∑—ã", data=f"{MENU_PREFIX}ext.del.eq.custom")],
        [dict(text="üîô –ù–∞–∑–∞–¥",        data=f"{MENU_PREFIX}ext")],
    ]
    await _safe_edit(q, txt, parse_mode=ParseMode.HTML, reply_markup=_mk_inline(kb))

# ===== –¢–ï–ö–°–¢–û–í–´–ô –†–û–£–¢–ï–† (–≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) =====

async def menu_text_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –≤ main.py –∫–∞–∫ MessageHandler(filters.TEXT & ~filters.COMMAND)."""
    st = context.user_data.get("__await")

    # –†–∞–∑—Ä–µ—à–∞–µ–º –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ –ø—Ä–µ—Å–µ—Ç–∞ –¥–∞–∂–µ –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if not _is_connected(context):
        if not st or st.get("kind") != "preset_rename":
            return

    if not st:
        return

    kind = st.get("kind")
    text = (update.message.text or "").strip()

    if kind == "create_eq_qty":
        eq = int(st["eq"])
        try:
            qty = int(text)
            if qty <= 0:
                raise ValueError
        except Exception:
            await update.message.reply_text("‚ùó –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 10")
            return
        context.args = [str(eq), str(qty)]
        await create_cmd(update, context)
        context.user_data.pop("__await", None)
        return

    if kind == "add_single":
        parts = text.split(maxsplit=1)
        try:
            ext = str(int(parts[0]))
        except Exception:
            await update.message.reply_text("‚ùó –í–≤–µ–¥–∏—Ç–µ EXT, –Ω–∞–ø—Ä–∏–º–µ—Ä: 101 –∏–ª–∏ '101 –û—Ñ–∏—Å –ö–∏–µ–≤'")
            return
        name = parts[1] if len(parts) > 1 else ""
        context.args = [ext] + ([name] if name else [])
        await add_cmd(update, context)
        context.user_data.pop("__await", None)
        return

    if kind == "add_range":
        parts = text.split(maxsplit=1)
        rng = parts[0]
        name_prefix = parts[1] if len(parts) > 1 else ""
        if "-" not in rng:
            await update.message.reply_text("‚ùó –í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ 101-105 (–∏ –æ–ø—Ü. –ø—Ä–µ—Ñ–∏–∫—Å)")
            return
        a, b = rng.split("-", 1)
        try:
            _ = int(a); _ = int(b)
        except Exception:
            await update.message.reply_text("‚ùó –î–∏–∞–ø–∞–∑–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä 401-418")
            return
        context.args = [rng] + ([name_prefix] if name_prefix else [])
        await add_cmd(update, context)
        context.user_data.pop("__await", None)
        return

    if kind == "del_numbers":
        context.args = [text]
        await del_cmd(update, context)
        context.user_data.pop("__await", None)
        return
    
    if kind == "in_add":
        text = (update.message.text or "").strip()
        if not text:
            await update.message.reply_text("‚ùó –í–≤–µ–¥–∏—Ç–µ EXT –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω, –Ω–∞–ø—Ä–∏–º–µ—Ä: 414 –∏–ª–∏ 401-418")
            return

        context.args = [text]
        await add_inbound_cmd(update, context)
        context.user_data.pop("__await", None)
        return

    if kind == "in_del":
        text = (update.message.text or "").strip()
        if not text:
            await update.message.reply_text(
                "‚ùó –í–≤–µ–¥–∏—Ç–µ DID/EXT –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: 414 –∏–ª–∏ 401-418 –∏–ª–∏ 401 402 410-418"
            )
            return
        context.args = [text]      # <-- –Ω–µ –∫–∞—Å—Ç—É–µ–º –∫ int
        await del_inbound_cmd(update, context)
        context.user_data.pop("__await", None)
        return

    
    if kind == "create_eq_pick":
        txt = (update.message.text or "").strip()
        try:
            eq = int(txt)
            _ = equip_start(eq)
        except Exception:
            await update.message.reply_text(
                "‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –±–∞–∑—ã. –í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ –∏–∑: 1, 2, 3, 4, 10."
            )
            return
        await _ext_create_pick_qty_send(update.effective_message, eq)
        context.user_data.pop("__await", None)
        return

    if kind == "in_add_eq_pick":
        txt = (update.message.text or "").strip()
        try:
            eq = int(txt)
            start = equip_start(eq)
            end = start + 99
        except Exception:
            await update.message.reply_text(
                "‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –±–∞–∑—ã. –í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ –∏–∑: 1, 2, 3, 4, 10."
            )
            return
        context.args = [f"{start}-{end}"]
        await add_inbound_cmd(update, context)
        context.user_data.pop("__await", None)
        return
    
    if kind == "del_eq_pick":
        txt = (update.message.text or "").strip()
        try:
            eq = int(txt)
            from utils.common import equip_start
            _ = equip_start(eq)
        except Exception:
            await update.message.reply_text(
                "‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –±–∞–∑—ã. –í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ –∏–∑: 1, 2, 3, 4, 10."
            )
            return

        from handlers.commands import del_eq_cmd  
        context.args = [str(eq)]
        await del_eq_cmd(update, context)

        context.user_data.pop("__await", None)
        return
    
    if kind == "ext_set_secret":
        parts = text.split()
        if not parts:
            await update.message.reply_text("‚ùó –í–≤–µ–¥–∏—Ç–µ: <code>&lt;ext&gt; [new_secret] [--also-ext]</code>", parse_mode=ParseMode.HTML)
            return
        try:
            ext = str(int(parts[0]))
        except Exception:
            await update.message.reply_text("‚ùó –ü–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–æ–º–µ—Ä–æ–º EXT, –Ω–∞–ø—Ä–∏–º–µ—Ä: 301")
            return

        also_ext = False
        new_pass = None
        rest = parts[1:]
        if rest:
            if "--also-ext" in rest:
                also_ext = True
                rest.remove("--also-ext")
            if rest:
                new_pass = rest[0]

        args = [ext]
        if new_pass:
            args.append(new_pass)
        if also_ext:
            args.append("--also-ext")

        context.args = args
        from handlers.commands import set_secret_cmd
        await set_secret_cmd(update, context)
        context.user_data.pop("__await", None)
        return
    
    if kind == "ext_set_secret_range":
        parts = (update.message.text or "").strip().split()
        if not parts:
            await update.message.reply_text(
                "‚ùó –§–æ—Ä–º–∞—Ç: <code>&lt;targets&gt; [fixed_pass] [--also-ext]</code>\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>301 302 303-305</code>",
                parse_mode=ParseMode.HTML
            )
            return

        # —Ñ–ª–∞–≥
        also_ext = False
        if "--also-ext" in parts:
            also_ext = True
            parts.remove("--also-ext")

        import re
        target_tokens, fixed_pass = [], None
        for tok in parts:
            if re.fullmatch(r"\d+(-\d+)?", tok):
                target_tokens.append(tok)
            else:
                fixed_pass = tok
                break

        if not target_tokens:
            await update.message.reply_text(
                "‚ùó –£–∫–∞–∂–∏ EXT/–¥–∏–∞–ø–∞–∑–æ–Ω—ã. –ü—Ä–∏–º–µ—Ä: <code>301 302 303-305</code>",
                parse_mode=ParseMode.HTML
            )
            return

        args = [" ".join(target_tokens)]
        if fixed_pass:
            args.append(fixed_pass)
        if also_ext:
            args.append("--also-ext")

        context.args = args
        from handlers.commands import set_secret_cmd
        await set_secret_cmd(update, context)
        context.user_data.pop("__await", None)
        return


    # ===== –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞ (–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ) =====
    if kind == "preset_rename":
        key = st.get("key")
        new_label = text
        if not new_label:
            await update.message.reply_text("‚ùó –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return

        user_id = update.effective_user.id
        profiles = load_profiles_for(user_id)
        if key not in profiles:
            await update.message.reply_text("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            context.user_data.pop("__await", None)
            return

        profiles[key]["label"] = new_label
        save_profiles_for(user_id, profiles)
        await update.message.reply_text(f"‚úÖ –ò–º—è –ø—Ä–µ—Å–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: <b>{new_label}</b>", parse_mode=ParseMode.HTML)

        # –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–µ—Å–µ—Ç–∞ –µ—â—ë —Ä–∞–∑ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
        prof = profiles[key]
        txt = (
            "üîó <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n"
            f"URL: <code>{prof.get('base_url','')}</code>\n"
            f"Client ID: <code>{(prof.get('client_id') or '')[:12]}‚Ä¶</code>\n"
            f"SSH: <code>{(prof.get('ssh') or {}).get('user','‚Äî')}@{(prof.get('ssh') or {}).get('host','‚Äî')}</code>"
        )
        await update.message.reply_text(txt, parse_mode=ParseMode.HTML, reply_markup=preset_actions_kb(key))
        context.user_data.pop("__await", None)
        return

    context.user_data.pop("__await", None)


# ===== –ì–õ–ê–í–ù–´–ô –†–û–£–¢–ï–† –ö–ù–û–ü–û–ö =====

async def menu_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()

    data = q.data
    route = data[len(MENU_PREFIX):]

    # === –†–∞–∑—Ä–µ—à–∞–µ–º —Ä–∞–∑–¥–µ–ª Presets –¥–∞–∂–µ –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ===
    if not _is_connected(context):
        # –ï—Å–ª–∏ —é–∑–µ—Ä –Ω–∞–∂–∏–º–∞–µ—Ç –Ω–∞ Presets/–¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–µ—Å–µ—Ç–æ–≤ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–Ω—É—Ç—Ä—å
        if route in ("srv",) or route.startswith("srv."):
            # —Å–ø–∏—Å–æ–∫ –ø—Ä–µ—Å–µ—Ç–æ–≤
            if route == "srv":
                profiles = _profiles(update)
                if not profiles:
                    await _safe_edit(
                        q,
                        "üîó <b>Presets</b>\n–ü–æ–∫–∞ –ø—É—Å—Ç–æ. –í—ã–ø–æ–ª–Ω–∏—Ç–µ /connect —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.",
                        parse_mode=ParseMode.HTML,
                        reply_markup=not_connected_kb(False)
                    )
                    return
                await _safe_edit(
                    q,
                    "üîó <b>Presets</b> ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å:",
                    parse_mode=ParseMode.HTML,
                    reply_markup=servers_menu_kb(profiles)
                )
                return

            # –∫–∞—Ä—Ç–æ—á–∫–∞ –ø—Ä–µ—Å–µ—Ç–∞
            if route.startswith("srv.open."):
                key = route.split(".")[-1]
                profiles = _profiles(update)
                if key not in profiles:
                    await _safe_edit(q, "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode=ParseMode.HTML,
                                     reply_markup=not_connected_kb(bool(profiles)))
                    return
                prof = profiles[key]
                txt = (
                    "üîó <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n"
                    f"URL: <code>{prof.get('base_url','')}</code>\n"
                    f"Client ID: <code>{(prof.get('client_id') or '')[:12]}‚Ä¶</code>\n"
                    f"SSH: <code>{(prof.get('ssh') or {}).get('user','‚Äî')}@{(prof.get('ssh') or {}).get('host','‚Äî')}</code>"
                )
                await _safe_edit(q, txt, parse_mode=ParseMode.HTML, reply_markup=preset_actions_kb(key))
                return

            # –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ø–æ –ø—Ä–µ—Å–µ—Ç—É
            if route.startswith("srv.do.connect."):
                key = route.split(".")[-1]
                await connect_profile_by_key(update, context, key)
                return

            # –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –ø—Ä–µ—Å–µ—Ç
            if route.startswith("srv.do.rename."):
                key = route.split(".")[-1]
                profiles = _profiles(update)
                if key not in profiles:
                    await _safe_edit(q, "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode=ParseMode.HTML,
                                     reply_markup=not_connected_kb(bool(profiles)))
                    return
                context.user_data["__await"] = {"kind": "preset_rename", "key": key}
                await _safe_edit(
                    q,
                    "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –ø—Ä–µ—Å–µ—Ç–∞ (–±—É–¥–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ):",
                    parse_mode=ParseMode.HTML,
                    reply_markup=not_connected_kb(bool(profiles))
                )
                return

            # —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ—Å–µ—Ç
            if route.startswith("srv.do.delete."):
                key = route.split(".")[-1]
                profiles = _profiles(update)
                if key in profiles:
                    profiles.pop(key, None)
                    save_profiles_for(_uid(update), profiles)
                    await _safe_edit(
                        q,
                        "üóë –ü—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª—ë–Ω.\n\nüîó <b>Presets</b> ‚Äî —Å–ø–∏—Å–æ–∫:",
                        parse_mode=ParseMode.HTML,
                        reply_markup=servers_menu_kb(profiles) if profiles else not_connected_kb(False)
                    )
                    return
                else:
                    await _safe_edit(q, "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode=ParseMode.HTML,
                                     reply_markup=not_connected_kb(bool(profiles)))
                    return

        # –ò–Ω–∞—á–µ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É + –∫–Ω–æ–ø–∫—É Presets (–µ—Å–ª–∏ –µ—Å—Ç—å)
        profiles = _profiles(update)
        await _safe_edit(q, NOT_CONNECTED, parse_mode=ParseMode.HTML,
                         reply_markup=not_connected_kb(bool(profiles)))
        return

    # ===== –ù–∏–∂–µ ‚Äî –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è =====

    # —Ä–∞–∑–¥–µ–ª—ã –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
    if route == "home":
        await _safe_edit(q, "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>", parse_mode=ParseMode.HTML, reply_markup=main_menu_kb()); return
    if route == "ext":
        await _safe_edit(q, "üß© <b>Extensions</b> ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", parse_mode=ParseMode.HTML, reply_markup=ext_menu_kb()); return
    if route == "in":
        await _safe_edit(q, "‚¨ÖÔ∏è <b>Inbound</b> ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", parse_mode=ParseMode.HTML, reply_markup=in_menu_kb()); return

    # ===== Asterisk =====
    if route == "ast":
        await _safe_edit(q, "üìû <b>Asterisk</b> ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", parse_mode=ParseMode.HTML, reply_markup=ast_menu_kb()); return
    if route == "ast.detect":
        await goip_detect_ip_cmd(update, context); return
    if route == "ast.sync":
        await set_incoming_sip_cmd(update, context); return
    if route == "ast.radmin.restart":
        from handlers.commands import radmin_restart_cmd
        await radmin_restart_cmd(update, context); return

    # ===== System =====
    if route == "sys":
        await _safe_edit(q, "üõ† <b>System</b> ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", parse_mode=ParseMode.HTML, reply_markup=sys_menu_kb()); return
    if route == "sys.reconnect":
        await reconnect_cmd(update, context); return
    if route == "sys.ping":
        await ping_cmd(update, context); return
    if route == "sys.whoami":
        await whoami_cmd(update, context); return
    if route == "sys.logout":
        await logout_cmd(update, context)
        await _safe_edit(q, "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>", parse_mode=ParseMode.HTML, reply_markup=main_menu_kb())
        return

    # ===== GraphQL =====
    if route == "gql":
        await _safe_edit(q, "üß¨ <b>GraphQL</b> ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", parse_mode=ParseMode.HTML, reply_markup=gql_menu_kb()); return
    if route == "gql.fields":
        await gql_fields_cmd(update, context); return
    if route == "gql.mutations":
        await gql_mutations_cmd(update, context); return

    if route == "help":
        await _safe_edit(q, "‚ÑπÔ∏è <b>Help</b>. –ö–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ –º–µ–Ω—é.", parse_mode=ParseMode.HTML, reply_markup=back_home_kb()); return

    # —Å–ø–∏—Å–æ–∫
    if route == "ext.list":
        await list_cmd(update, context); return

    # ===== –°–û–ó–î–ê–ù–ò–ï =====
    if route == "ext.create":
        await _ext_create_root(q); return
    if route == "ext.create.eq":
        await _ext_create_pick_eq(q); return
    if route == "ext.create.eq.custom":
        context.user_data["__await"] = {"kind": "create_eq_pick"}
        await _safe_edit(
            q,
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä <b>–±–∞–∑—ã</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1, 2, 3, 4, 10).",
            parse_mode=ParseMode.HTML,
            reply_markup=back_home_kb()
        ); return
    if route.startswith("ext.create.eq."):
        eq = int(route.split(".")[-1])
        await _ext_create_pick_qty(q, eq); return
    if route.startswith("ext.create.eqqty."):
        parts = route.split(".")
        if len(parts) >= 4 and parts[3] == "custom":
            eq = int(parts[4])
            context.user_data["__await"] = {"kind": "create_eq_qty", "eq": eq}
            await _safe_edit(
                q,
                f"‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ <b>–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</b> –¥–ª—è –±–∞–∑—ã <b>{eq}</b> (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):",
                parse_mode=ParseMode.HTML,
                reply_markup=back_home_kb()
            ); return
        eq = int(parts[3]); qty = int(parts[4])
        context.args = [str(eq), str(qty)]
        await create_cmd(update, context); return
    if route == "ext.create.single":
        context.user_data["__await"] = {"kind": "add_single"}
        await _safe_edit(
            q,
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ EXT –∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ø—Ä–µ—Ñ–∏–∫—Å –∏–º–µ–Ω–∏. –ü—Ä–∏–º–µ—Ä—ã:\n"
            "<code>101</code>\n"
            "<code>101 –û—Ñ–∏—Å –ö–∏–µ–≤</code>",
            parse_mode=ParseMode.HTML, reply_markup=back_home_kb()
        ); return
    if route == "ext.create.range":
        context.user_data["__await"] = {"kind": "add_range"}
        await _safe_edit(
            q,
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ø—Ä–µ—Ñ–∏–∫—Å –∏–º–µ–Ω–∏. –ü—Ä–∏–º–µ—Ä—ã:\n"
            "<code>101-105</code>\n"
            "<code>401-418 –ü—Ä–æ–¥–∞–∂–∏</code>",
            parse_mode=ParseMode.HTML, reply_markup=back_home_kb()
        ); return

    # ===== –£–î–ê–õ–ï–ù–ò–ï =====
    if route == "ext.del":
        await _ext_delete_root(q); return
    if route == "ext.del.numbers":
        context.user_data["__await"] = {"kind": "del_numbers"}
        await _safe_edit(
            q,
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞/–¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "<code>401</code>\n"
            "<code>401 402 410-418</code>",
            parse_mode=ParseMode.HTML, reply_markup=back_home_kb()
        ); return
    if route in ("ext.del.eq", "ext.del_root"):
        await _ext_delete_pick_eq(q); return
    if route == "ext.del.eq.custom":
        context.user_data["__await"] = {"kind": "del_eq_pick"}
        await _safe_edit(
            q,
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä <b>–±–∞–∑—ã</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1, 2, 3, 4, 10).",
            parse_mode=ParseMode.HTML,
            reply_markup=back_home_kb()
        ); return
    if route.startswith("ext.del.eq."):
        eq = int(route.split(".")[-1])
        context.args = [f"{eq}"]
        from handlers.commands import del_eq_cmd  # –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç
        await del_eq_cmd(update, context); return
    if route == "ext.del_all":
        from telegram import InlineKeyboardMarkup, InlineKeyboardButton
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("–î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å—ë", callback_data="delall:yes"),
             InlineKeyboardButton("–û—Ç–º–µ–Ω–∞",          callback_data="delall:no")]
        ])
        await _safe_edit(q, "‚ö†Ô∏è –¢–æ—á–Ω–æ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –ª–∏–Ω–∏–∏?", parse_mode=ParseMode.HTML, reply_markup=kb); return
    # ===== –ü–ê–†–û–õ–¨ =====
    if route == "ext.secret":
        # –¥–µ–ª–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤–≤–æ–¥: –æ–¥–∏–Ω –∏–ª–∏ –º–Ω–æ–≥–æ/–¥–∏–∞–ø–∞–∑–æ–Ω—ã
        context.user_data["__await"] = {"kind": "ext_set_secret_range"}
        await _safe_edit(
            q,
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–∏ –∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –æ–±—â–∏–π –ø–∞—Ä–æ–ª—å.\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "<code>301</code>\n"
            "<code>301-305</code>\n"
            "<code>301 302 303-305</code>\n"
            "<code>301-305 OneStrongPass --also-ext</code>\n"
            "–ï—Å–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω ‚Äî –∫–∞–∂–¥–æ–º—É EXT –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã–π.",
            parse_mode=ParseMode.HTML,
            reply_markup=back_home_kb()
        ); return


    # ===== Presets =====
    if route == "srv":
        profiles = _profiles(update)
        if not profiles:
            await _safe_edit(
                q,
                "üîó <b>Presets</b>\n–ü–æ–∫–∞ –ø—É—Å—Ç–æ. –í—ã–ø–æ–ª–Ω–∏—Ç–µ /connect —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.",
                parse_mode=ParseMode.HTML,
                reply_markup=back_home_kb()
            ); return
        await _safe_edit(
            q,
            "üîó <b>Presets</b> ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å:",
            parse_mode=ParseMode.HTML,
            reply_markup=servers_menu_kb(profiles)
        ); return

    if route.startswith("srv.open."):
        key = route.split(".")[-1]
        profiles = _profiles(update)
        if key not in profiles:
            await _safe_edit(q, "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode=ParseMode.HTML, reply_markup=back_home_kb()); return
        prof = profiles[key]
        txt = (
            "üîó <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n"
            f"URL: <code>{prof.get('base_url','')}</code>\n"
            f"Client ID: <code>{(prof.get('client_id') or '')[:12]}‚Ä¶</code>\n"
            f"SSH: <code>{(prof.get('ssh') or {}).get('user','‚Äî')}@{(prof.get('ssh') or {}).get('host','‚Äî')}</code>"
        )
        await _safe_edit(q, txt, parse_mode=ParseMode.HTML, reply_markup=preset_actions_kb(key)); return

    if route.startswith("srv.do.connect."):
        key = route.split(".")[-1]
        await connect_profile_by_key(update, context, key); return

    if route.startswith("srv.do.rename."):
        key = route.split(".")[-1]
        profiles = _profiles(update)
        if key not in profiles:
            await _safe_edit(q, "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode=ParseMode.HTML, reply_markup=back_home_kb()); return
        context.user_data["__await"] = {"kind": "preset_rename", "key": key}
        await _safe_edit(
            q,
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –ø—Ä–µ—Å–µ—Ç–∞ (–±—É–¥–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ):",
            parse_mode=ParseMode.HTML,
            reply_markup=back_home_kb()
        ); return

    if route.startswith("srv.do.delete."):
        key = route.split(".")[-1]
        profiles = _profiles(update)
        if key in profiles:
            profiles.pop(key, None)
            save_profiles_for(_uid(update), profiles)
            await _safe_edit(
                q,
                "üóë –ü—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª—ë–Ω.\n\nüîó <b>Presets</b> ‚Äî —Å–ø–∏—Å–æ–∫:",
                parse_mode=ParseMode.HTML,
                reply_markup=servers_menu_kb(profiles) if profiles else back_home_kb()
            ); return
        else:
            await _safe_edit(q, "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode=ParseMode.HTML, reply_markup=back_home_kb()); return

    # ===== INBOUND =====
    if route == "in.list":
        await list_routes_cmd(update, context); return
    if route == "in.add":
        context.user_data["__await"] = {"kind": "in_add"}
        await _safe_edit(
            q,
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ EXT –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è inbound route(–æ–≤).\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "<code>414</code>\n"
            "<code>401-418</code>\n"
            "–û–ø–∏—Å–∞–Ω–∏–µ –±—É–¥–µ—Ç –≤–∏–¥–∞ <code>sim{ext}</code>, –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –Ω–∞ Extension {ext}.",
            parse_mode=ParseMode.HTML,
            reply_markup=back_home_kb()
        ); return
    if route == "in.add.eq":
        await _in_add_pick_eq(q); return
    if route == "in.add.eq.custom":
        context.user_data["__await"] = {"kind": "in_add_eq_pick"}
        await _safe_edit(
            q,
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä <b>–±–∞–∑—ã</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1, 2, 3, 4, 10).",
            parse_mode=ParseMode.HTML,
            reply_markup=back_home_kb()
        ); return
    if route.startswith("in.add.eq."):
        eq = int(route.split(".")[-1])
        start = equip_start(eq)
        end = start + 99
        context.args = [f"{start}-{end}"]
        await add_inbound_cmd(update, context); return
    if route == "in.del":
        context.user_data["__await"] = {"kind": "in_del"}
        await _safe_edit(
            q,
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ DID/EXT –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è Inbound Route(–æ–≤). –î–æ–ø—É—Å—Ç–∏–º—ã –æ–¥–∏–Ω–æ—á–Ω—ã–µ –Ω–æ–º–µ—Ä–∞, –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ü–µ–ª–µ–π.\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "<code>414</code>\n"
            "<code>401-418</code>\n"
            "<code>401 402 410-418</code>",
            parse_mode=ParseMode.HTML,
            reply_markup=back_home_kb()
        ); return


    # —Ñ–æ–ª–ª–±–µ–∫
    await _safe_edit(
        q,
        f"‚è≥ –ù–∞–∂–∞—Ç–æ: <code>{route}</code>. –†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
        parse_mode=ParseMode.HTML,
        reply_markup=back_home_kb()
    )
