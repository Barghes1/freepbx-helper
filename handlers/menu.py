from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import ContextTypes
from telegram.error import BadRequest

from ui.keyboards import (
    MENU_PREFIX, main_menu_kb, back_home_kb,
    ext_menu_kb, in_menu_kb, sys_menu_kb, gql_menu_kb
)
from ui.texts import NOT_CONNECTED

from handlers.commands import (
    list_cmd, create_cmd, add_cmd, del_cmd, 
    reconnect_cmd, ping_cmd, whoami_cmd, logout_cmd, 
    gql_fields_cmd, gql_mutations_cmd,
    list_routes_cmd, add_inbound_cmd, del_inbound_cmd
)

from utils.common import equip_start
# ===== helpers =====

def _is_connected(context: ContextTypes.DEFAULT_TYPE) -> bool:
    return bool(context.user_data.get("__connected"))

async def _safe_edit(q, text, **kwargs):
    try:
        return await q.edit_message_text(text, **kwargs)
    except BadRequest as e:
        if "message is not modified" in str(e).lower():
            return None
        raise

def _mk_inline(spec_rows):
    from telegram import InlineKeyboardMarkup, InlineKeyboardButton
    rows = []
    for row in spec_rows:
        rows.append([InlineKeyboardButton(b["text"], callback_data=b["data"]) for b in row])
    return InlineKeyboardMarkup(rows)

async def send_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    target = update.effective_message
    await target.reply_text(
        "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>",
        parse_mode=ParseMode.HTML,
        reply_markup=main_menu_kb(),
    )


# ===== –≠–ö–†–ê–ù–´: –°–æ–∑–¥–∞–Ω–∏–µ =====

async def _ext_create_root(q, *, text_suffix: str = ""):
    txt = (
        "‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ –ª–∏–Ω–∏–π</b>\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±:\n\n"
        "‚Ä¢ –ü–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, 4 ‚Üí 401‚Ä¶)\n"
        "‚Ä¢ –û–¥–∏–Ω –Ω–æ–º–µ—Ä (EXT)\n"
        "‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω (start-end)\n"
    )
    if text_suffix:
        txt += f"\n<code>{text_suffix}</code>"
    kb = [
        [dict(text="üè≠ –ü–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é", data=f"{MENU_PREFIX}ext.create.eq")],
        [
            dict(text="1Ô∏è‚É£ –û–¥–∏–Ω –Ω–æ–º–µ—Ä", data=f"{MENU_PREFIX}ext.create.single"),
            dict(text="‚ÜîÔ∏è –î–∏–∞–ø–∞–∑–æ–Ω",    data=f"{MENU_PREFIX}ext.create.range"),
        ],
        [dict(text="üîô –ù–∞–∑–∞–¥", data=f"{MENU_PREFIX}ext")],
    ]
    await _safe_edit(q, txt, parse_mode=ParseMode.HTML, reply_markup=_mk_inline(kb))

async def _ext_create_pick_eq(q):
    txt = "üè≠ –í—ã–±–µ—Ä–∏—Ç–µ <b>–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ</b> (—Å—Ç–∞—Ä—Ç–æ–≤–∞—è –±–∞–∑–∞ EXT):"
    kb = [
        [
            dict(text="1 ‚Üí 101‚Ä¶", data=f"{MENU_PREFIX}ext.create.eq.1"),
            dict(text="2 ‚Üí 201‚Ä¶", data=f"{MENU_PREFIX}ext.create.eq.2"),
        ],
        [
            dict(text="3 ‚Üí 301‚Ä¶", data=f"{MENU_PREFIX}ext.create.eq.3"),
            dict(text="4 ‚Üí 401‚Ä¶", data=f"{MENU_PREFIX}ext.create.eq.4"),
        ],
        [dict(text="10 ‚Üí 1001‚Ä¶", data=f"{MENU_PREFIX}ext.create.eq.10")],
        [dict(text="‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –±–∞–∑—ã", data=f"{MENU_PREFIX}ext.create.eq.custom")],  # ‚Üê –ù–û–í–û–ï
        [dict(text="üîô –ù–∞–∑–∞–¥",   data=f"{MENU_PREFIX}ext.create")],
    ]
    await _safe_edit(q, txt, parse_mode=ParseMode.HTML,
                     reply_markup=_mk_inline(kb))


async def _ext_create_pick_qty(q, eq: int):
    txt = f"üì¶ –ë–∞–∑–∞ <b>{eq}</b>. –í—ã–±–µ—Ä–∏—Ç–µ <b>–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</b> –ª–∏–Ω–∏–π:"
    kb = [
        [
            dict(text="1",  data=f"{MENU_PREFIX}ext.create.eqqty.{eq}.1"),
            dict(text="5",  data=f"{MENU_PREFIX}ext.create.eqqty.{eq}.5"),
            dict(text="10", data=f"{MENU_PREFIX}ext.create.eqqty.{eq}.10"),
        ],
        [
            dict(text="20",            data=f"{MENU_PREFIX}ext.create.eqqty.{eq}.20"),
            dict(text="50",            data=f"{MENU_PREFIX}ext.create.eqqty.{eq}.50"),
            dict(text="‚úçÔ∏è –í–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ", data=f"{MENU_PREFIX}ext.create.eqqty.custom.{eq}"),
        ],
        [dict(text="üîô –ù–∞–∑–∞–¥", data=f"{MENU_PREFIX}ext.create.eq")],
    ]
    await _safe_edit(q, txt, parse_mode=ParseMode.HTML, reply_markup=_mk_inline(kb))
    
async def _ext_create_pick_qty_send(target_message, eq: int):
    txt = f"üì¶ –ë–∞–∑–∞ <b>{eq}</b>. –í—ã–±–µ—Ä–∏—Ç–µ <b>–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</b> –ª–∏–Ω–∏–π:"
    kb = [
        [
            dict(text="1",  data=f"{MENU_PREFIX}ext.create.eqqty.{eq}.1"),
            dict(text="5",  data=f"{MENU_PREFIX}ext.create.eqqty.{eq}.5"),
            dict(text="10", data=f"{MENU_PREFIX}ext.create.eqqty.{eq}.10"),
        ],
        [
            dict(text="20",            data=f"{MENU_PREFIX}ext.create.eqqty.{eq}.20"),
            dict(text="50",            data=f"{MENU_PREFIX}ext.create.eqqty.{eq}.50"),
            dict(text="‚úçÔ∏è –í–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ", data=f"{MENU_PREFIX}ext.create.eqqty.custom.{eq}"),
        ],
        [dict(text="üîô –ù–∞–∑–∞–¥", data=f"{MENU_PREFIX}ext.create.eq")],
    ]
    await target_message.reply_text(
        txt, parse_mode=ParseMode.HTML, reply_markup=_mk_inline(kb)
    )


async def _in_add_pick_eq(q):
    txt = "üè≠ –í—ã–±–µ—Ä–∏—Ç–µ <b>–±–∞–∑—É</b>, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Å–æ–∑–¥–∞—Ç—å inbound-–º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –í–°–ï–• —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö EXT (–¥–∏–∞–ø–∞–∑–æ–Ω 100 –Ω–æ–º–µ—Ä–æ–≤):"
    kb = [
        [
            dict(text="1 ‚Üí 101-199",  data=f"{MENU_PREFIX}in.add.eq.1"),
            dict(text="2 ‚Üí 201-299",  data=f"{MENU_PREFIX}in.add.eq.2"),
        ],
        [
            dict(text="3 ‚Üí 301-399",  data=f"{MENU_PREFIX}in.add.eq.3"),
            dict(text="4 ‚Üí 401-499",  data=f"{MENU_PREFIX}in.add.eq.4"),
        ],
        [dict(text="10 ‚Üí 1001-1099", data=f"{MENU_PREFIX}in.add.eq.10")],
        [dict(text="‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –±–∞–∑—ã", data=f"{MENU_PREFIX}in.add.eq.custom")],  # ‚Üê –ù–û–í–û–ï
        [dict(text="üîô –ù–∞–∑–∞–¥",        data=f"{MENU_PREFIX}in")],
    ]
    await _safe_edit(q, txt, parse_mode=ParseMode.HTML, reply_markup=_mk_inline(kb))

# ===== –≠–ö–†–ê–ù–´: –£–¥–∞–ª–µ–Ω–∏–µ =====

async def _ext_delete_root(q):
    txt = (
        "üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –ª–∏–Ω–∏–π</b>\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±:\n"
        "‚Ä¢ –£–¥–∞–ª–∏—Ç—å –ø–æ –Ω–æ–º–µ—Ä–∞–º/–¥–∏–∞–ø–∞–∑–æ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 401 402 410-418)\n"
        "‚Ä¢ –£–¥–∞–ª–∏—Ç—å –≤—Å–µ 100 –Ω–æ–º–µ—Ä–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –±–∞–∑—ã (1‚Üí101‚Ä¶, 4‚Üí401‚Ä¶ –∏ —Ç.–¥.)\n"
        "‚Ä¢ –£–¥–∞–ª–∏—Ç—å –í–°–Å (–≤—Å–µ EXT)\n"
    )
    kb = [
        [dict(text="üî¢ –£–¥–∞–ª–∏—Ç—å –Ω–æ–º–µ—Ä–∞/–¥–∏–∞–ø–∞–∑–æ–Ω", data=f"{MENU_PREFIX}ext.del.numbers")],
        [dict(text="üè≠ –£–¥–∞–ª–∏—Ç—å –ø–æ –±–∞–∑–µ",         data=f"{MENU_PREFIX}ext.del.eq")],
        [dict(text="üß® –£–¥–∞–ª–∏—Ç—å –í–°–Å",             data=f"{MENU_PREFIX}ext.del_all")],
        [dict(text="üîô –ù–∞–∑–∞–¥",                   data=f"{MENU_PREFIX}ext")],
    ]
    await _safe_edit(q, txt, parse_mode=ParseMode.HTML, reply_markup=_mk_inline(kb))

async def _ext_delete_pick_eq(q):
    txt = "üè≠ –í—ã–±–µ—Ä–∏—Ç–µ <b>–±–∞–∑—É</b> –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –µ—ë –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (100 –Ω–æ–º–µ—Ä–æ–≤):"
    kb = [
        [
            dict(text="1 ‚Üí 101-199",  data=f"{MENU_PREFIX}ext.del.eq.1"),
            dict(text="2 ‚Üí 201-299",  data=f"{MENU_PREFIX}ext.del.eq.2"),
        ],
        [
            dict(text="3 ‚Üí 301-399",  data=f"{MENU_PREFIX}ext.del.eq.3"),
            dict(text="4 ‚Üí 401-499",  data=f"{MENU_PREFIX}ext.del.eq.4"),
        ],
        [dict(text="10 ‚Üí 1001-1099", data=f"{MENU_PREFIX}ext.del.eq.10")],
        [dict(text="‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –±–∞–∑—ã", data=f"{MENU_PREFIX}ext.del.eq.custom")],
        [dict(text="üîô –ù–∞–∑–∞–¥",        data=f"{MENU_PREFIX}ext")],
    ]
    await _safe_edit(q, txt, parse_mode=ParseMode.HTML, reply_markup=_mk_inline(kb))

# ===== –¢–ï–ö–°–¢–û–í–´–ô –†–û–£–¢–ï–† (–≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) =====

async def menu_text_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –≤ main.py –∫–∞–∫ MessageHandler(filters.TEXT & ~filters.COMMAND)."""
    if not _is_connected(context):
        return

    st = context.user_data.get("__await")
    if not st:
        return

    kind = st.get("kind")
    text = (update.message.text or "").strip()

    if kind == "create_eq_qty":
        eq = int(st["eq"])
        try:
            qty = int(text)
            if qty <= 0:
                raise ValueError
        except Exception:
            await update.message.reply_text("‚ùó –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 10")
            return
        context.args = [str(eq), str(qty)]
        await create_cmd(update, context)
        context.user_data.pop("__await", None)
        return

    if kind == "add_single":
        parts = text.split(maxsplit=1)
        try:
            ext = str(int(parts[0]))
        except Exception:
            await update.message.reply_text("‚ùó –í–≤–µ–¥–∏—Ç–µ EXT, –Ω–∞–ø—Ä–∏–º–µ—Ä: 101 –∏–ª–∏ '101 –û—Ñ–∏—Å –ö–∏–µ–≤'")
            return
        name = parts[1] if len(parts) > 1 else ""
        context.args = [ext] + ([name] if name else [])
        await add_cmd(update, context)
        context.user_data.pop("__await", None)
        return

    if kind == "add_range":
        parts = text.split(maxsplit=1)
        rng = parts[0]
        name_prefix = parts[1] if len(parts) > 1 else ""
        if "-" not in rng:
            await update.message.reply_text("‚ùó –í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ 101-105 (–∏ –æ–ø—Ü. –ø—Ä–µ—Ñ–∏–∫—Å)")
            return
        a, b = rng.split("-", 1)
        try:
            _ = int(a); _ = int(b)
        except Exception:
            await update.message.reply_text("‚ùó –î–∏–∞–ø–∞–∑–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä 401-418")
            return
        context.args = [rng] + ([name_prefix] if name_prefix else [])
        await add_cmd(update, context)
        context.user_data.pop("__await", None)
        return

    if kind == "del_numbers":
        context.args = [text]
        await del_cmd(update, context)
        context.user_data.pop("__await", None)
        return
    
    if kind == "in_add":
        text = (update.message.text or "").strip()
        if not text:
            await update.message.reply_text("‚ùó –í–≤–µ–¥–∏—Ç–µ EXT –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω, –Ω–∞–ø—Ä–∏–º–µ—Ä: 414 –∏–ª–∏ 401-418")
            return

        context.args = [text]
        await add_inbound_cmd(update, context)
        context.user_data.pop("__await", None)
        return

    if kind == "in_del":
        did = (update.message.text or "").strip()
        try:
            _ = int(did)
        except Exception:
            await update.message.reply_text("‚ùó DID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: 414")
            return
        context.args = [did]
        await del_inbound_cmd(update, context)
        context.user_data.pop("__await", None)
        return
    
    if kind == "create_eq_pick":
        txt = (update.message.text or "").strip()
        try:
            eq = int(txt)
            _ = equip_start(eq)
        except Exception:
            await update.message.reply_text(
                "‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –±–∞–∑—ã. –í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ –∏–∑: 1, 2, 3, 4, 10."
            )
            return
        await _ext_create_pick_qty_send(update.effective_message, eq)
        context.user_data.pop("__await", None)
        return

    if kind == "in_add_eq_pick":
        txt = (update.message.text or "").strip()
        try:
            eq = int(txt)
            start = equip_start(eq)
            end = start + 99
        except Exception:
            await update.message.reply_text(
                "‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –±–∞–∑—ã. –í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ –∏–∑: 1, 2, 3, 4, 10."
            )
            return
        context.args = [f"{start}-{end}"]
        await add_inbound_cmd(update, context)
        context.user_data.pop("__await", None)
        return
    
    if kind == "del_eq_pick":
        txt = (update.message.text or "").strip()
        try:
            eq = int(txt)
            from utils.common import equip_start
            _ = equip_start(eq)
        except Exception:
            await update.message.reply_text(
                "‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –±–∞–∑—ã. –í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ –∏–∑: 1, 2, 3, 4, 10."
            )
            return

        from handlers.commands import del_eq_cmd  
        context.args = [str(eq)]
        await del_eq_cmd(update, context)

        context.user_data.pop("__await", None)
        return


    context.user_data.pop("__await", None)


# ===== –ì–õ–ê–í–ù–´–ô –†–û–£–¢–ï–† –ö–ù–û–ü–û–ö =====

async def menu_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()

    if not _is_connected(context):
        await _safe_edit(q, NOT_CONNECTED, parse_mode=ParseMode.HTML, reply_markup=back_home_kb())
        return

    data = q.data
    route = data[len(MENU_PREFIX):]

    # —Ä–∞–∑–¥–µ–ª—ã
    if route == "home":
        await _safe_edit(q, "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>", parse_mode=ParseMode.HTML, reply_markup=main_menu_kb()); return
    if route == "ext":
        await _safe_edit(q, "üß© <b>Extensions</b> ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", parse_mode=ParseMode.HTML, reply_markup=ext_menu_kb()); return
    if route == "ext.create.eq.custom":
        context.user_data["__await"] = {"kind": "create_eq_pick"}
        await _safe_edit(
            q,
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä <b>–±–∞–∑—ã</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1, 2, 3, 4, 10).",
            parse_mode=ParseMode.HTML,
            reply_markup=back_home_kb()
        )
        return
    if route == "ext.del.eq.custom":
        context.user_data["__await"] = {"kind": "del_eq_pick"}
        await _safe_edit(
            q,
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä <b>–±–∞–∑—ã</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1, 2, 3, 4, 10).",
            parse_mode=ParseMode.HTML,
            reply_markup=back_home_kb()
        )
        return
    if route == "in":
        await _safe_edit(q, "‚¨ÖÔ∏è <b>Inbound</b> ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", parse_mode=ParseMode.HTML, reply_markup=in_menu_kb()); return
    if route == "in.list":
        await list_routes_cmd(update, context)
        return
    if route == "in.add":
        context.user_data["__await"] = {"kind": "in_add"}
        await _safe_edit(
            q,
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ EXT –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è inbound route(–æ–≤).\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "<code>414</code>\n"
            "<code>401-418</code>\n"
            "–û–ø–∏—Å–∞–Ω–∏–µ –±—É–¥–µ—Ç –≤–∏–¥–∞ <code>sim{ext}</code>, –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –Ω–∞ Extension {ext}.",
            parse_mode=ParseMode.HTML,
            reply_markup=back_home_kb()
        )
        return
    if route == "in.add.eq":
        await _in_add_pick_eq(q)
        return
    if route == "in.add.eq.custom":
        context.user_data["__await"] = {"kind": "in_add_eq_pick"}
        await _safe_edit(
            q,
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä <b>–±–∞–∑—ã</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1, 2, 3, 4, 10).",
            parse_mode=ParseMode.HTML,
            reply_markup=back_home_kb()
        )
        return
    if route.startswith("in.add.eq."):
        eq = int(route.split(".")[-1])
        start = equip_start(eq)           
        end = start + 99                  
        context.args = [f"{start}-{end}"] 
        await add_inbound_cmd(update, context)
        return
    if route == "in.del":
        context.user_data["__await"] = {"kind": "in_del"}
        await _safe_edit(
            q,
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ DID (EXT) –º–∞—Ä—à—Ä—É—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>414</code>",
            parse_mode=ParseMode.HTML,
            reply_markup=back_home_kb()
        )
        return

    if route == "sys":
        await _safe_edit(q, "üõ† <b>System</b> ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", parse_mode=ParseMode.HTML, reply_markup=sys_menu_kb()); return
    
    if route == "sys.reconnect":
        await reconnect_cmd(update, context)
        return

    if route == "sys.ping":
        await ping_cmd(update, context)
        return

    if route == "sys.whoami":
        await whoami_cmd(update, context)
        return

    if route == "sys.logout":
        await logout_cmd(update, context)
        await _safe_edit(q, "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>", parse_mode=ParseMode.HTML, reply_markup=main_menu_kb())
        return

    if route == "gql":
        await _safe_edit(q, "üß¨ <b>GraphQL</b> ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", parse_mode=ParseMode.HTML, reply_markup=gql_menu_kb()); return
    if route == "gql.fields":
        await gql_fields_cmd(update, context)
        return
    if route == "gql.mutations":
        await gql_mutations_cmd(update, context)
        return

    if route == "help":
        await _safe_edit(q, "‚ÑπÔ∏è <b>Help</b>. –ö–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ –º–µ–Ω—é.", parse_mode=ParseMode.HTML, reply_markup=back_home_kb()); return

    # —Å–ø–∏—Å–æ–∫
    if route == "ext.list":
        await list_cmd(update, context); return

    # —Å–æ–∑–¥–∞–Ω–∏–µ
    if route == "ext.create":
        await _ext_create_root(q); return
    if route == "ext.create.eq":
        await _ext_create_pick_eq(q); return
    if route.startswith("ext.create.eq."):
        eq = int(route.split(".")[-1])
        await _ext_create_pick_qty(q, eq); return
    if route.startswith("ext.create.eqqty."):
        parts = route.split(".")
        if len(parts) >= 4 and parts[3] == "custom":
            eq = int(parts[4])
            context.user_data["__await"] = {"kind": "create_eq_qty", "eq": eq}
            await _safe_edit(q,
                f"‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ <b>–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</b> –¥–ª—è –±–∞–∑—ã <b>{eq}</b> (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):",
                parse_mode=ParseMode.HTML,
                reply_markup=back_home_kb()
            )
            return
        eq = int(parts[3]); qty = int(parts[4])
        context.args = [str(eq), str(qty)]
        await create_cmd(update, context); return
    if route == "ext.create.single":
        context.user_data["__await"] = {"kind": "add_single"}
        await _safe_edit(q,
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ EXT –∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –∏–º—è. –ü—Ä–∏–º–µ—Ä—ã:\n"
            "<code>101</code>\n"
            "<code>101 –û—Ñ–∏—Å –ö–∏–µ–≤</code>",
            parse_mode=ParseMode.HTML, reply_markup=back_home_kb()
        ); return
    if route == "ext.create.range":
        context.user_data["__await"] = {"kind": "add_range"}
        await _safe_edit(q,
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ø—Ä–µ—Ñ–∏–∫—Å –∏–º–µ–Ω–∏. –ü—Ä–∏–º–µ—Ä—ã:\n"
            "<code>101-105</code>\n"
            "<code>401-418 –ü—Ä–æ–¥–∞–∂–∏</code>",
            parse_mode=ParseMode.HTML, reply_markup=back_home_kb()
        ); return

    # —É–¥–∞–ª–µ–Ω–∏–µ
    if route == "ext.del":
        await _ext_delete_root(q); return
    if route == "ext.del.numbers":
        context.user_data["__await"] = {"kind": "del_numbers"}
        await _safe_edit(q,
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞/–¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "<code>401</code>\n"
            "<code>401 402 410-418</code>",
            parse_mode=ParseMode.HTML, reply_markup=back_home_kb()
        ); return
    if route in ("ext.del.eq", "ext.del_root"):
        await _ext_delete_pick_eq(q); return
    if route.startswith("ext.del.eq."):
        eq = int(route.split(".")[-1])
        context.args = [f"{eq}"]
        from handlers.commands import del_eq_cmd  # –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç
        await del_eq_cmd(update, context); return
    if route == "ext.del_all":
        from telegram import InlineKeyboardMarkup, InlineKeyboardButton
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("–î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å—ë", callback_data="delall:yes"),
             InlineKeyboardButton("–û—Ç–º–µ–Ω–∞",          callback_data="delall:no")]
        ])
        await _safe_edit(q, "‚ö†Ô∏è –¢–æ—á–Ω–æ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –ª–∏–Ω–∏–∏?", parse_mode=ParseMode.HTML, reply_markup=kb); return

    # —Ñ–æ–ª–ª–±–µ–∫
    await _safe_edit(q,
        f"‚è≥ –ù–∞–∂–∞—Ç–æ: <code>{route}</code>. –†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
        parse_mode=ParseMode.HTML, reply_markup=back_home_kb()
    )
