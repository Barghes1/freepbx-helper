import asyncio
import json
import logging
import os
import re
import secrets
import sys
import time
from html import escape
from pathlib import Path
from typing import Dict
from urllib.parse import urlparse

from telegram import (
    BotCommand,
    BotCommandScopeAllChatAdministrators,
    BotCommandScopeAllGroupChats,
    BotCommandScopeAllPrivateChats,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardRemove,
    Update,
)
from telegram.constants import ChatAction, ParseMode
from telegram.ext import Application, ContextTypes

from core.asterisk import (
    SSHExecError,
    _ssh_run,
    fetch_endpoint_raw_via_ssh,
    fetch_goip_ips_via_ssh,
    fetch_pjsip_endpoints_via_ssh,
    set_extension_chansip_secret_via_ssh,
    set_incoming_trunk_sip_server_via_ssh,
    create_outbound_route_with_ranges_via_ssh,
)
from core.freepbx import AlreadyExists, FreePBX
from core.goip import GoIP, GoipStatus

from ui.keyboards import main_menu_kb, not_connected_kb
from ui.texts import HELP_TEXT, _list_nav_kb, _list_page_text

from utils.common import (
    _gen_secret,
    _profile_key,
    _slice_pairs,
    clean_url,
    equip_start,
    next_free,
    parse_targets,
    _ext_to_slot
)


log = logging.getLogger(__name__)

def _default_presets_path() -> str:
    env = os.getenv("PRESETS_PATH")
    if env:
        p = Path(env).expanduser()
        p.parent.mkdir(parents=True, exist_ok=True)
        return str(p)

    appdir = "freepbx-telegram-bot"
    home = Path.home()

    if sys.platform.startswith("win"):
        base = Path(os.getenv("APPDATA", home / "AppData" / "Roaming"))
        root = base / appdir
    elif sys.platform == "darwin":
        root = home / "Library" / "Application Support" / appdir
    else:
        base = Path(os.getenv("XDG_CONFIG_HOME", home / ".config"))
        root = base / appdir

    root.mkdir(parents=True, exist_ok=True)
    return str(root / "presets.json")

PRESETS_PATH = _default_presets_path()

SESS: Dict[int, dict] = {}
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
GOIP_SESS: Dict[int, dict] = {}
GOIP_STATE_CACHE: Dict[int, str] = {}

def _presets_dir() -> Path:
    p = Path(_default_presets_path()).expanduser()
    root = p.parent if p.suffix else p
    root.mkdir(parents=True, exist_ok=True)
    return root

def _user_presets_path(user_id: int) -> Path:
    return _presets_dir() / f"presets.{user_id}.json"

def load_profiles_for(user_id: int) -> dict:
    p = _user_presets_path(user_id)
    try:
        if p.is_file():
            data = json.loads(p.read_text(encoding="utf-8"))
            if isinstance(data, dict):
                return data
    except Exception as e:
        log.warning(f"Failed to load presets for {user_id} from {p}: {e}")
    return {}

def save_profiles_for(user_id: int, profiles: dict) -> None:
    p = _user_presets_path(user_id)
    try:
        p.parent.mkdir(parents=True, exist_ok=True)
        tmp = p.with_suffix(".tmp")
        tmp.write_text(json.dumps(profiles, ensure_ascii=False, indent=2), encoding="utf-8")
        tmp.replace(p)
        log.info(f"Saved {len(profiles)} presets to {p}")
    except Exception as e:
        log.warning(f"Failed to save presets for {user_id} to {p}: {e}")

def _uid(u: Update) -> int:
    return u.effective_user.id

def fb_from_session(chat_id: int) -> FreePBX:
    s = SESS.get(chat_id)
    if not s:
        raise RuntimeError("–°–Ω–∞—á–∞–ª–∞ /connect <ip> <login> <password>")
    fb = FreePBX(s["base_url"], s["client_id"], s["client_secret"], verify=s["verify"])
    fb.token = s.get("token")
    fb.token_exp = s.get("token_exp", 0)
    return fb

def _need_connect_text() -> str:
    return (
        "‚ùóÔ∏è–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å:\n"
        "<code>/connect &lt;host&gt; &lt;client_id&gt; &lt;client_secret&gt; [&lt;ssh_login&gt; &lt;ssh_password&gt;]</code>\n\n"
        "‚Ä¶–∏–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ <b>Presets</b> –Ω–∏–∂–µ üëá"
    )

async def _ensure_connected(u: Update) -> bool:
    chat = u.effective_chat
    if chat and chat.id in SESS:
        return True

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç + –∫–Ω–æ–ø–∫—É "Presets"
    text = _need_connect_text()
    kb = not_connected_kb(True)  # —Ä–∏—Å—É–µ–º –∫–Ω–æ–ø–∫—É Presets –¥–∞–∂–µ –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç ‚Äî –≤–Ω—É—Ç—Ä–∏ –º–µ–Ω—é —ç—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç—Å—è

    # –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: –µ—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî reply_text, –µ—Å–ª–∏ callback ‚Äî alert + —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
    if getattr(u, "message", None):
        await u.message.reply_text(text, reply_markup=kb)
    elif getattr(u, "callback_query", None):
        # –ü–æ–∫–∞–∂–µ–º alert –∏ –æ—Ç–ø—Ä–∞–≤–∏–º –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        try:
            await u.callback_query.answer("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å: /connect ‚Ä¶ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Presets", show_alert=True)
        except Exception:
            pass
        # –æ—Ç–ø—Ä–∞–≤–∏–º –≤ —á–∞—Ç –ø–æ–¥—Å–∫–∞–∑–∫—É —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        try:
            await u.callback_query.message.reply_text(text, reply_markup=kb)
        except Exception:
            pass
    return False

async def start_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE):
    await u.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —É–ø—Ä–∞–≤–ª—è—Ç—å FreePBX: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, —Å–ø–∏—Å–æ–∫ SIP, —Å–æ–∑–¥–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ.\n"
        "–ù–∞–±–µ—Ä–∏ /help –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.",
        reply_markup=ReplyKeyboardRemove()
    )
    await u.message.reply_text(
        "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>",
        parse_mode=ParseMode.HTML,
        reply_markup=main_menu_kb(),
    )

async def help_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE):
    await u.message.reply_text(HELP_TEXT)

async def connect_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE):
    if len(c.args) < 3:
        await u.message.reply_text(
            "–§–æ—Ä–º–∞—Ç:\n"
            "<code>/connect &lt;host&gt; &lt;client_id&gt; &lt;client_secret&gt; [ssh_login] [ssh_password]</code>\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ <code>/connect http://77.105.146.189 CID SECRET</code>\n"
            "‚Ä¢ <code>/connect 77.105.146.189 CID SECRET root Very$trongPass</code>"
        )
        return

    raw_host, client_id, client_secret = c.args[0], c.args[1], c.args[2]
    ssh_login = c.args[3] if len(c.args) >= 4 else None
    ssh_password = " ".join(c.args[4:]) if len(c.args) >= 5 else None  # –ø–∞—Ä–æ–ª—å –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –ø—Ä–æ–±–µ–ª—ã

    parsed = urlparse(raw_host)
    if not parsed.scheme:
        base_url = f"http://{raw_host}"
        verify = False
        host_for_ssh = raw_host
    else:
        base_url = raw_host
        verify = not base_url.startswith("http://")
        host_for_ssh = parsed.hostname or raw_host

    await u.message.chat.send_action(ChatAction.TYPING)
    fb = FreePBX(base_url, client_id, client_secret, verify=verify)

    try:
        # –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        fb.ensure_token()

        # —Å–æ–±–∏—Ä–∞–µ–º —Å–µ—Å—Å–∏—é
        sess = {
            "base_url": fb.base_url,
            "client_id": client_id,
            "client_secret": client_secret,
            "verify": verify,
            "token": fb.token,
            "token_exp": fb.token_exp,
        }
        if ssh_login and ssh_password:
            sess["ssh"] = {
                "host": host_for_ssh,
                "user": ssh_login,
                "password": ssh_password,
                "port": 22,
            }

        SESS[u.effective_chat.id] = sess
        c.user_data["__connected"] = True

        user_id = _uid(u)
        profiles = load_profiles_for(user_id)
        key = _profile_key(fb.base_url, client_id)
        is_new_profile = key not in profiles
        if is_new_profile:
            profiles[key] = {
                "base_url": fb.base_url,
                "client_id": client_id,
                "client_secret": client_secret,
                "verify": verify,
                "ssh": sess.get("ssh"),
                "label": f"{host_for_ssh} ‚Ä¢ {client_id[:6]}‚Ä¶",
            }
            save_profiles_for(user_id, profiles)


        pairs = fb.fetch_all_extensions()
        c.user_data["__last_pairs"] = pairs
        pairs_page, page, pages = _slice_pairs(pairs, page=0)
        text = _list_page_text(clean_url(fb.base_url), pairs_page)
        kb = _list_nav_kb(page, pages)

        # —Å–æ–æ–±—â–µ–Ω–∏—è
        msg = [f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ <code>{escape(fb.base_url)}</code>"]
        if "ssh" in sess:
            shown_user = escape(sess["ssh"]["user"])
            shown_host = escape(sess["ssh"]["host"])
            msg.append(f"üîê SSH —Å–æ—Ö—Ä–∞–Ω—ë–Ω: <code>{shown_user}@{shown_host}</code>")
        if is_new_profile:
            msg.append("üíæ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Ä–∞–∑–¥–µ–ª–µ –º–µ–Ω—é <b>üîó Presets</b>.")

        await u.message.reply_text("\n".join(msg), parse_mode=ParseMode.HTML)

        await u.message.reply_text(
            "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>",
            parse_mode=ParseMode.HTML,
            reply_markup=main_menu_kb(),
        )

        await u.message.reply_text(text, reply_markup=kb)

    except Exception as e:
        await u.message.reply_text(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: <code>{escape(str(e))}</code>")

async def connect_profile_by_key(u: Update, c: ContextTypes.DEFAULT_TYPE, key: str):
    user_id = _uid(u)
    profiles = load_profiles_for(user_id)
    prof = profiles.get(key)
    if not prof:
        msg = "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω (–≤ –≤–∞—à–∏—Ö –ø—Ä–µ—Å–µ—Ç–∞—Ö)."
        if getattr(u, "callback_query", None):
            try:
                await u.callback_query.answer(msg, show_alert=True)
            except Exception:
                pass
            return
        await u.effective_message.reply_text(msg)
        return

    base_url = prof["base_url"]
    client_id = prof["client_id"]
    client_secret = prof["client_secret"]
    verify = prof.get("verify", True)
    ssh = prof.get("ssh")

    await u.effective_message.chat.send_action(ChatAction.TYPING)
    fb = FreePBX(base_url, client_id, client_secret, verify=verify)
    try:
        fb.ensure_token()
        sess = {
            "base_url": fb.base_url,
            "client_id": client_id,
            "client_secret": client_secret,
            "verify": verify,
            "token": fb.token,
            "token_exp": fb.token_exp,
        }
        if ssh:
            sess["ssh"] = {
                "host": ssh.get("host"),
                "user": ssh.get("user"),
                "password": ssh.get("password"),
                "port": ssh.get("port", 22),
            }
        SESS[u.effective_chat.id] = sess
        c.user_data["__connected"] = True

        pairs = fb.fetch_all_extensions()
        c.user_data["__last_pairs"] = pairs
        pairs_page, page, pages = _slice_pairs(pairs, page=0)
        text = _list_page_text(clean_url(fb.base_url), pairs_page)
        kb = _list_nav_kb(page, pages)

        msgs = [f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ <code>{escape(fb.base_url)}</code>"]
        if "ssh" in sess:
            shown_user = escape(sess["ssh"]["user"] or "‚Äî")
            shown_host = escape(sess["ssh"]["host"] or "‚Äî")
            msgs.append(f"üîê SSH: <code>{shown_user}@{shown_host}</code>")
        await u.effective_message.reply_text("\n".join(msgs), parse_mode=ParseMode.HTML)
        await u.effective_message.reply_text("üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>", parse_mode=ParseMode.HTML, reply_markup=main_menu_kb())
        await u.effective_message.reply_text(text, reply_markup=kb)
    except Exception as e:
        await u.effective_message.reply_text(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: <code>{escape(str(e))}</code>")

async def list_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE):
    if not await _ensure_connected(u):
        return
    try:
        fb = fb_from_session(u.effective_chat.id)
        pairs = fb.fetch_all_extensions()
        c.user_data["__last_pairs"] = pairs
        pairs_page, page, pages = _slice_pairs(pairs, page=0)

        target = u.effective_message  # —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ü–µ–ª—å –æ—Ç–≤–µ—Ç–∞
        await target.reply_text(
            _list_page_text(clean_url(fb.base_url), pairs_page),
            reply_markup=_list_nav_kb(page, pages)
        )
    except Exception as e:
        target = u.effective_message
        await target.reply_text(f"–û—à–∏–±–∫–∞: <code>{escape(str(e))}</code>")

async def create_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE):
    target = u.effective_message

    if len(c.args) < 2:
        await target.reply_text(
            "‚ùó –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:\n"
            "<code>/create &lt;–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ&gt; &lt;–∫–æ–ª-–≤–æ&gt;</code>\n\n"
            "–ì–¥–µ <b>–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ</b> ‚Äî –Ω–æ–º–µ—Ä –±–∞–∑—ã (—Å—Ç–∞—Ä—Ç EXT):\n"
            "‚Ä¢ 1 ‚Üí 101‚Ä¶\n‚Ä¢ 2 ‚Üí 201‚Ä¶\n‚Ä¢ 3 ‚Üí 301‚Ä¶\n‚Ä¢ 4 ‚Üí 401‚Ä¶\n‚Ä¢ 10 ‚Üí 1001‚Ä¶\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n<code>/create 4 10</code> ‚Äî —Å–æ–∑–¥–∞—Å—Ç 10 –ª–∏–Ω–∏–π, –Ω–∞—á–∏–Ω–∞—è —Å 401.\n",
        )
        return

    if not await _ensure_connected(u):
        return

    try:
        eq = int(c.args[0])
        cnt = int(c.args[1])
        if cnt <= 0:
            raise ValueError
    except Exception:
        await target.reply_text(
            "‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π: <code>/create &lt;–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ&gt; &lt;–∫–æ–ª-–≤–æ&gt;</code>\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>/create 4 10</code>"
        )
        return

    fb = fb_from_session(u.effective_chat.id)
    try:
        notice = await target.reply_text(f"‚è≥ –°–æ–∑–¥–∞—é {cnt} –ª–∏–Ω–∏–π‚Ä¶ (0/{cnt})")
        await target.chat.send_action(ChatAction.TYPING)

        all_pairs = fb.fetch_all_extensions()
        existing = [ext for ext, _ in all_pairs]
        start = equip_start(eq)
        targets = next_free(existing, start, cnt)

        created = 0
        for i, ext in enumerate(targets, 1):
            fb.create_one(int(ext))
            secret = secrets.token_hex(16)
            fb.set_ext_password(ext, secret)

            created += 1
            if created % 5 == 0 or created == cnt:
                try:
                    await notice.edit_text(f"‚è≥ –°–æ–∑–¥–∞—é {cnt} –ª–∏–Ω–∏–π‚Ä¶ ({created}/{cnt})")
                except Exception:
                    pass
            await asyncio.sleep(0)

        if targets:
            try:
                try:
                    await notice.edit_text("üîÑ –ü—Ä–∏–º–µ–Ω—è—é –∫–æ–Ω—Ñ–∏–≥ (Apply Config)‚Ä¶")
                except Exception:
                    pass
                fb.apply_config()
                try:
                    await notice.edit_text("‚úÖ –ö–æ–Ω—Ñ–∏–≥ –ø—Ä–∏–º–µ–Ω—ë–Ω. –û–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–æ–∫‚Ä¶")
                except Exception:
                    pass
            except Exception as e:
                await target.reply_text(f"‚ö†Ô∏è Apply Config –Ω–µ —É–¥–∞–ª–æ—Å—å: <code>{escape(str(e))}</code>")

        pairs = fb.fetch_all_extensions()
        c.user_data["__last_pairs"] = pairs
        pairs_page, page, pages = _slice_pairs(pairs, page=0)

        await target.reply_text(
            _list_page_text(clean_url(fb.base_url), pairs_page),
            reply_markup=_list_nav_kb(page, pages)
        )
    except Exception as e:
        await target.reply_text(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: <code>{escape(str(e))}</code>")

async def del_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE):
    target = u.effective_message
    if not c.args:
        await target.reply_text("–§–æ—Ä–º–∞—Ç: /del 401 402 410-418")
        return
    if not await _ensure_connected(u):
        return

    fb = fb_from_session(u.effective_chat.id)
    requested = parse_targets(" ".join(c.args))
    try:
        await target.chat.send_action(ChatAction.TYPING)
        by_ext, _, _ = fb.fetch_ext_index()
        existing = set(by_ext.keys())

        targets = [x for x in requested if x in existing]
        missing = [x for x in requested if x not in existing]

        total = len(targets)
        notice = await target.reply_text(f"‚è≥ –£–¥–∞–ª—è—é –ª–∏–Ω–∏–∏‚Ä¶ (0/{total})") if total else None

        ok, failed = [], []
        for i, ext in enumerate(targets, 1):
            try:
                fb.delete_extension(ext)
                ok.append(ext)
            except Exception:
                failed.append(ext)
            if notice and (i % 10 == 0 or i == total):
                try:
                    await notice.edit_text(f"‚è≥ –£–¥–∞–ª—è—é –ª–∏–Ω–∏–∏‚Ä¶ ({i}/{total})")
                except Exception:
                    pass
            await asyncio.sleep(0)

        parts = []
        if ok:      parts.append("üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ: " + ", ".join(ok))
        if missing: parts.append("‚Ü©Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ—Ç —Ç–∞–∫–æ–π –ª–∏–Ω–∏–∏): " + ", ".join(missing))
        if failed:  parts.append("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: " + ", ".join(failed))
        if not parts: parts.append("–ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å.")
        await target.reply_text("\n".join(parts))

        if ok:
            try:
                if notice:
                    try: await notice.edit_text("üîÑ –ü—Ä–∏–º–µ–Ω—è—é –∫–æ–Ω—Ñ–∏–≥ (Apply Config)‚Ä¶")
                    except Exception: pass
                fb.apply_config()
                if notice:
                    try: await notice.edit_text("‚úÖ –ö–æ–Ω—Ñ–∏–≥ –ø—Ä–∏–º–µ–Ω—ë–Ω. –û–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–æ–∫‚Ä¶")
                    except Exception: pass
            except Exception as e:
                await target.reply_text(f"‚ö†Ô∏è Apply Config –Ω–µ —É–¥–∞–ª–æ—Å—å: <code>{escape(str(e))}</code>")

        pairs = fb.fetch_all_extensions()
        c.user_data["__last_pairs"] = pairs
        page_items, page, pages = _slice_pairs(pairs, page=0)
        await target.reply_text(
            _list_page_text(clean_url(fb.base_url), page_items),
            reply_markup=_list_nav_kb(page, pages)
        )
    except Exception as e:
        await target.reply_text(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: <code>{escape(str(e))}</code>")

async def del_eq_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE):
    target = u.effective_message
    if not c.args:
        await target.reply_text("–§–æ—Ä–º–∞—Ç: /del_eq <–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ>")
        return
    if not await _ensure_connected(u):
        return
    eq = int(c.args[0])
    start = equip_start(eq)
    end = start + 99
    c.args = [f"{start}-{end}"]
    await del_cmd(u, c)

async def del_all_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE):
    if not await _ensure_connected(u):
        return
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("–î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å—ë", callback_data="delall:yes"),
         InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="delall:no")]
    ])
    await u.message.reply_text("‚ö†Ô∏è –¢–æ—á–Ω–æ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –ª–∏–Ω–∏–∏?", reply_markup=kb)

async def add_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE):
    if not c.args:
        await u.message.reply_text(
            "–§–æ—Ä–º–∞—Ç—ã:\n"
            "<code>/add &lt;ext&gt; [–∏–º—è]</code>\n"
            "<code>/add &lt;start-end&gt; [–ø—Ä–µ—Ñ–∏–∫—Å_–∏–º–µ–Ω–∏]</code>\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "<code>/add 101</code>\n"
            "<code>/add 101 –û—Ñ–∏—Å –ö–∏–µ–≤</code>\n"
            "<code>/add 101-105 –ü—Ä–æ–¥–∞–∂–∏</code>"
        )
        return
    if not await _ensure_connected(u):
        return

    fb = fb_from_session(u.effective_chat.id)
    arg0 = c.args[0]
    name_tail = " ".join(c.args[1:]).strip()
    try:
        await u.message.chat.send_action(ChatAction.TYPING)

        targets = parse_targets(arg0) if "-" in arg0 else [arg0]
        total = len(targets)
        notice = await u.message.reply_text(f"‚è≥ –î–æ–±–∞–≤–ª—è—é –ª–∏–Ω–∏–∏‚Ä¶ (0/{total})")

        by_ext, name_set, name_ok = fb.fetch_ext_index()
        existing_exts = set(by_ext.keys())

        created, skipped_ext, skipped_name = [], [], []
        name_check_warn = False

        processed = 0
        for raw in targets:
            ext = str(int(raw))
            cand_name = (f"{name_tail} {ext}" if "-" in arg0 else name_tail) if name_tail else ext

            if ext in existing_exts:
                skipped_ext.append(ext)
            elif name_ok and cand_name.strip().lower() in name_set:
                skipped_name.append(f"{ext} ({cand_name})")
            else:
                if not name_ok:
                    name_check_warn = True
                fb.create_one(int(ext), cand_name)
                secret = secrets.token_hex(16)
                fb.set_ext_password(ext, secret)
                created.append(ext)
                existing_exts.add(ext)
                if name_ok and cand_name.strip():
                    name_set.add(cand_name.strip().lower())

            processed += 1
            if processed % 5 == 0 or processed == total:
                try:
                    await notice.edit_text(f"‚è≥ –î–æ–±–∞–≤–ª—è—é –ª–∏–Ω–∏–∏‚Ä¶ ({processed}/{total})")
                except Exception:
                    pass
            await asyncio.sleep(0)

        parts = []
        if created:
            parts.append("‚úÖ –°–æ–∑–¥–∞–Ω–æ: " + ", ".join(created))
        if skipped_ext:
            parts.append("‚Ü©Ô∏è –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç EXT: " + ", ".join(skipped_ext))
        if skipped_name:
            parts.append("üîÅ –î—É–±–ª–∏ –∏–º—ë–Ω: " + ", ".join(skipped_name))
        if name_check_warn:
            parts.append("‚ÑπÔ∏è –ò–º—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å (—Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–¥–∞—ë—Ç –∏–º–µ–Ω–∞).")
        if not parts:
            parts.append("–ù–µ—á–µ–≥–æ –¥–µ–ª–∞—Ç—å.")
        await u.message.reply_text("\n".join(parts))

        if created:
            try:
                try:
                    await notice.edit_text("üîÑ –ü—Ä–∏–º–µ–Ω—è—é –∫–æ–Ω—Ñ–∏–≥ (Apply Config)‚Ä¶")
                except Exception:
                    pass
                fb.apply_config()
                try:
                    await notice.edit_text("‚úÖ –ö–æ–Ω—Ñ–∏–≥ –ø—Ä–∏–º–µ–Ω—ë–Ω. –û–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–æ–∫‚Ä¶")
                except Exception:
                    pass
            except Exception as e:
                await u.message.reply_text(f"‚ö†Ô∏è Apply Config –Ω–µ —É–¥–∞–ª–æ—Å—å: <code>{escape(str(e))}</code>")

        pairs = fb.fetch_all_extensions()
        c.user_data["__last_pairs"] = pairs
        page_items, page, pages = _slice_pairs(pairs, page=0)
        await u.message.reply_text(
            _list_page_text(clean_url(fb.base_url), page_items),
            reply_markup=_list_nav_kb(page, pages)
        )
    except Exception as e:
        await u.message.reply_text(f"–û—à–∏–±–∫–∞ /add: <code>{escape(str(e))}</code>")

async def reconnect_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE):
    if not await _ensure_connected(u):
        return
    try:
        target = u.effective_message
        s = SESS.get(u.effective_chat.id)
        fb = FreePBX(s["base_url"], s["client_id"], s["client_secret"], verify=s["verify"])
        fb.ensure_token()
        s["token"] = fb.token
        s["token_exp"] = fb.token_exp
        await target.reply_text("üîÅ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.")
    except Exception as e:
        await target.reply_text(f"–û—à–∏–±–∫–∞ reconnect: <code>{escape(str(e))}</code>")

async def ping_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE):
    if not await _ensure_connected(u):
        return
    try:
        target = u.effective_message
        fb = fb_from_session(u.effective_chat.id)
        fb.ensure_token()
        _ = fb.gql("query { fetchAllExtensions { extension { extensionId } } }")
        await target.reply_text("‚úÖ OK")
    except Exception as e:
        await target.reply_text(f"‚ùå Unauthorized / –æ—à–∏–±–∫–∞: <code>{escape(str(e))}</code>")

async def whoami_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE):
    if not await _ensure_connected(u):
        return
    target = u.effective_message
    s = SESS.get(u.effective_chat.id)
    ttl = max(0, int(s.get("token_exp", 0) - time.time()))
    token = s.get("token", "<–Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞>")

    await target.reply_text(
        "üë§ <b>–¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è</b>\n"
        f"URL: <code>{s['base_url']}</code>\n"
        f"Client ID: <code>{s['client_id']}</code>\n"
        f"TLS verify: <code>{s['verify']}</code>\n"
        f"–¢–æ–∫–µ–Ω –∂–∏–≤ –µ—â—ë: <code>{ttl} —Å–µ–∫</code>\n"
        f"Access Token:\n<code>{token}</code>",
        parse_mode=ParseMode.HTML
    )

async def logout_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE):
    target = u.effective_message
    SESS.pop(u.effective_chat.id, None)
    c.user_data.clear()
    await target.reply_text("üö™ –°–µ—Å—Å–∏—è —Å–±—Ä–æ—à–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /connect.")

async def list_routes_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE):
    if not await _ensure_connected(u):
        return
    fb = fb_from_session(u.effective_chat.id)
    target = u.effective_message
    try:
        routes = fb.list_inbound_routes()
        if not routes:
            await target.reply_text("–ú–∞—Ä—à—Ä—É—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        lines = ["DID | Description | ID"]
        for r in routes:
            did = r.get("extension")
            desc = r.get("description")
            rid = r.get("id")
            lines.append(f"{did} | {desc} | {rid}")
        await target.reply_text("\n".join(lines))
    except Exception as e:
        await target.reply_text(f"–û—à–∏–±–∫–∞ /list_routes: <code>{escape(str(e))}</code>")

async def add_inbound_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE):
    target = u.effective_message

    if not c.args:
        await target.reply_text(
            "–§–æ—Ä–º–∞—Ç—ã:\n"
            "<code>/add_inbound &lt;ext&gt;</code>\n"
            "<code>/add_inbound &lt;start-end&gt;</code>\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "<code>/add_inbound 414</code>\n"
            "<code>/add_inbound 401-418</code>\n"
            "–ú–∞—Ä—à—Ä—É—Ç —Å–æ–∑–¥–∞—ë—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ EXT —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. DID –±—É–¥–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>_simEXT</code>."
        )
        return
    if not await _ensure_connected(u):
        return

    fb = fb_from_session(u.effective_chat.id)
    arg0 = " ".join(c.args)
    targets = parse_targets(arg0)

    def ext_to_slot(ext: str):
        try:
            n = int(ext)
            s = n % 100
            return s if 1 <= s <= 32 else None
        except Exception:
            return None

    try:
        await target.chat.send_action(ChatAction.TYPING)

        by_ext, _, _ = fb.fetch_ext_index()
        existing_exts = set(by_ext.keys())

        routes_now = fb.list_inbound_routes()
        existing_dids = {r.get("extension") for r in routes_now if r.get("extension")}

        todo = [x for x in targets if x in existing_exts]
        missing = [x for x in targets if x not in existing_exts]

        total = len(todo)
        if total == 0:
            msg = ["–ù–µ—á–µ–≥–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å."]
            if missing:
                msg.append("‚Ü©Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ—Ç —Ç–∞–∫–∏—Ö EXT): " + ", ".join(missing))
            await target.reply_text("\n".join(msg))
            return

        notice = await target.reply_text(f"‚è≥ –î–æ–±–∞–≤–ª—è—é Inbound Routes‚Ä¶ (0/{total})")

        ok, skipped_exists, failed = [], [], []
        for i, ext in enumerate(todo, 1):
            did_prefx = f"_sim{ext}"
            if ext in existing_dids or did_prefx in existing_dids:
                skipped_exists.append(ext)
            else:
                try:
                    fb.create_inbound_route(did=did_prefx, description=f"sim{ext}", ext=ext)
                    ok.append(ext)
                    existing_dids.add(did_prefx)
                except AlreadyExists:
                    skipped_exists.append(ext)
                except Exception as e:
                    failed.append(f"{ext} ({str(e)[:80]})")

            if i % 5 == 0 or i == total:
                try:
                    await notice.edit_text(f"‚è≥ –î–æ–±–∞–≤–ª—è—é Inbound Routes‚Ä¶ ({i}/{total})")
                except Exception:
                    pass
            await asyncio.sleep(0)

        parts = []
        if ok:
            parts.append("‚úÖ –°–æ–∑–¥–∞–Ω–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤: " + ", ".join(ok))
        if skipped_exists:
            parts.append("‚Ü©Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ –µ—Å—Ç—å DID ext –∏–ª–∏ _simext): " + ", ".join(skipped_exists))
        if missing:
            parts.append("‚Ü©Ô∏è –ù–µ—Ç —Ç–∞–∫–∏—Ö EXT: " + ", ".join(missing))
        if failed:
            parts.append("‚ùå –û—à–∏–±–∫–∏: " + ", ".join(failed))
        await target.reply_text("\n".join(parts) if parts else "–ù–µ—á–µ–≥–æ –¥–µ–ª–∞—Ç—å.")

        if ok:
            try:
                try:
                    await notice.edit_text("üîÑ –ü—Ä–∏–º–µ–Ω—è—é –∫–æ–Ω—Ñ–∏–≥ (Apply Config)‚Ä¶")
                except Exception:
                    pass
                fb.apply_config()
                try:
                    await notice.edit_text("‚úÖ –ö–æ–Ω—Ñ–∏–≥ –ø—Ä–∏–º–µ–Ω—ë–Ω.")
                except Exception:
                    pass
            except Exception as e:
                await target.reply_text(f"‚ö†Ô∏è Apply Config –Ω–µ —É–¥–∞–ª–æ—Å—å: <code>{escape(str(e))}</code>")

            try:
                goip = goip_from_session(u.effective_chat.id)
                slots = sorted({ext_to_slot(x) for x in ok if ext_to_slot(x)})
                if slots:
                    done, errs = [], []
                    for s in slots:
                        ok1, msg1 = goip.set_incoming_enabled(s, True)
                        (done if ok1 else errs).append(str(s) if ok1 else f"{s} ({msg1})")
                        await asyncio.sleep(0)
                    lines = []
                    if done: lines.append("üì≤ GOIP: –≤–∫–ª—é—á–µ–Ω—ã –≤—Ö–æ–¥—è—â–∏–µ –¥–ª—è —Å–ª–æ—Ç–æ–≤: " + ", ".join(done))
                    if errs: lines.append("‚ö†Ô∏è GOIP: –æ—à–∏–±–∫–∏ –ø–æ —Å–ª–æ—Ç–∞–º: " + ", ".join(errs))
                    if lines:
                        await target.reply_text("\n".join(lines))
                else:
                    await target.reply_text("‚ÑπÔ∏è GOIP: –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–ª–æ—Ç–æ–≤ (1..32) –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            except Exception as e:
                await target.reply_text(f"‚ö†Ô∏è GOIP: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è: <code>{escape(str(e))}</code>")

    except Exception as e:
        await target.reply_text(f"–û—à–∏–±–∫–∞ /add_inbound: <code>{escape(str(e))}</code>")

async def del_inbound_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE):
    target = u.effective_message

    if not c.args:
        await target.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/del_inbound &lt;ext|–¥–∏–∞–ø–∞–∑–æ–Ω—ã&gt;</code>\n"
            "–ü—Ä–∏–º–µ—Ä—ã: <code>/del_inbound 414</code> –∏–ª–∏ <code>/del_inbound 401-418</code> –∏–ª–∏ <code>/del_inbound 401 402 410-418</code>",
            parse_mode=ParseMode.HTML
        )
        return
    if not await _ensure_connected(u):
        return

    fb = fb_from_session(u.effective_chat.id)
    raw_targets = " ".join(c.args)

    try:
        await target.chat.send_action(ChatAction.TYPING)

        exts = parse_targets(raw_targets)
        if not exts:
            await target.reply_text("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ü–µ–ª–∏. –ü—Ä–∏–º–µ—Ä: <code>/del_inbound 401 402 410-418</code>", parse_mode=ParseMode.HTML)
            return

        routes = fb.list_inbound_routes()
        route_by_did = { (r.get("extension") or "").strip(): r for r in routes if r.get("extension") }

        todo, missing = [], []
        for ext in exts:
            did_sim = f"_sim{ext}"
            r = route_by_did.get(did_sim) or route_by_did.get(ext)
            if r:
                shown = r.get("extension") or ext
                todo.append((shown, r, ext))
            else:
                missing.append(ext)

        if not todo:
            msg = ["–ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å."]
            if missing:
                msg.append("‚Ü©Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è: " + ", ".join(missing))
            await target.reply_text("\n".join(msg))
            return

        total = len(todo)
        notice = await target.reply_text(f"‚è≥ –£–¥–∞–ª—è—é Inbound Routes‚Ä¶ (0/{total})")

        ok, failed = [], []
        for i, (shown, route, ext) in enumerate(todo, 1):
            try:
                res = fb.delete_inbound_route(route["id"])
                status = (res.get("status") if isinstance(res, dict) else None)
                msg = (res.get("message") if isinstance(res, dict) else "") or ""
                status_str = str(status).lower() if status is not None else ""
                okish = status_str in ("ok", "true") or "success" in msg.lower()
                (ok if okish else failed).append((shown, ext, msg or str(res)))
            except Exception as e:
                failed.append((shown, ext, str(e)))

            if i % 5 == 0 or i == total:
                try:
                    await notice.edit_text(f"‚è≥ –£–¥–∞–ª—è—é Inbound Routes‚Ä¶ ({i}/{total})")
                except Exception:
                    pass
            await asyncio.sleep(0)

        try:
            await notice.edit_text("üîÑ –ü—Ä–∏–º–µ–Ω—è—é –∫–æ–Ω—Ñ–∏–≥ (Apply Config)‚Ä¶")
        except Exception:
            pass
        try:
            fb.apply_config()
            try:
                await notice.edit_text("‚úÖ –ö–æ–Ω—Ñ–∏–≥ –ø—Ä–∏–º–µ–Ω—ë–Ω. –§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á—ë—Ç‚Ä¶")
            except Exception:
                pass
        except Exception as e:
            try:
                await notice.edit_text(f"‚ö†Ô∏è Apply Config –Ω–µ —É–¥–∞–ª–æ—Å—å: {escape(str(e))}")
            except Exception:
                pass

        try:
            if ok:
                goip = goip_from_session(u.effective_chat.id)
                # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π –æ–¥–∏–Ω —Ä–∞–∑ —Å–≤–µ—Ä—Ö—É —Ñ–∞–π–ª–∞:
                # from utils.common import _ext_to_slot
                slots = sorted({ _ext_to_slot(ext) for _, ext, _ in ok if _ext_to_slot(ext) })
                if slots:
                    done, errs = [], []
                    for s in slots:
                        ok1, msg1 = goip.set_incoming_enabled(s, False)
                        (done if ok1 else errs).append(str(s) if ok1 else f"{s} ({msg1})")
                        await asyncio.sleep(0)
                    if done:
                        await target.reply_text("üì≤ GOIP: –≤—ã–∫–ª—é—á–µ–Ω—ã –≤—Ö–æ–¥—è—â–∏–µ –¥–ª—è —Å–ª–æ—Ç–æ–≤: " + ", ".join(done))
                    if errs:
                        await target.reply_text("‚ö†Ô∏è GOIP: –æ—à–∏–±–∫–∏ –ø–æ —Å–ª–æ—Ç–∞–º: " + ", ".join(errs))
                else:
                    await target.reply_text("‚ÑπÔ∏è GOIP: –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–ª–æ—Ç–æ–≤ (1..32) –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        except Exception as e:
            await target.reply_text(f"‚ö†Ô∏è GOIP: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è: <code>{escape(str(e))}</code>", parse_mode=ParseMode.HTML)

        # 7) —Å–≤–æ–¥–∫–∞
        parts = []
        if ok:
            parts.append("‚úÖ –£–¥–∞–ª–µ–Ω—ã –º–∞—Ä—à—Ä—É—Ç—ã: " + ", ".join(shown for shown, _, _ in ok))
        if missing:
            parts.append("‚Ü©Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã (–Ω–∏ DID=_simEXT, –Ω–∏ DID=EXT): " + ", ".join(missing))
        if failed:
            parts.append("‚ùå –û—à–∏–±–∫–∏: " + ", ".join(f"{shown} ({msg[:60]})" for shown, _, msg in failed))
        await target.reply_text("\n".join(parts) if parts else "–ù–µ—á–µ–≥–æ –¥–µ–ª–∞—Ç—å.")

    except Exception as e:
        await target.reply_text(f"–û—à–∏–±–∫–∞ /del_inbound: <code>{escape(str(e))}</code>", parse_mode=ParseMode.HTML)

async def gql_fields_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE):
    if not await _ensure_connected(u):
        return
    fb = fb_from_session(u.effective_chat.id)
    target = u.effective_message
    try:
        fields = fb.list_query_fields()
        if not fields:
            await target.reply_text("Query-–ø–æ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        chunk = []
        total = 0
        for f in fields:
            line = f"- {f}"
            if sum(len(x) for x in chunk) + len(line) + 1 > 3500:
                await target.reply_text("–î–æ—Å—Ç—É–ø–Ω—ã–µ Query:\n" + "\n".join(chunk))
                chunk = []
            chunk.append(line)
            total += 1
        if chunk:
            await target.reply_text("–î–æ—Å—Ç—É–ø–Ω—ã–µ Query:\n" + "\n".join(chunk))
    except Exception as e:
        await target.reply_text(f"–û—à–∏–±–∫–∞ introspect: {escape(str(e))}")
        
async def gql_mutations_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE):
    if not await _ensure_connected(u):
        return
    fb = fb_from_session(u.effective_chat.id)
    target = u.effective_message
    try:
        muts = fb.list_mutations()
        if not muts:
            await target.reply_text("Mutation-–ø–æ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        chunk = []
        total = 0
        for m in muts:
            line = f"- {m}"
            if sum(len(x) for x in chunk) + len(line) + 1 > 3500:
                await target.reply_text("–î–æ—Å—Ç—É–ø–Ω—ã–µ Mutation:\n" + "\n".join(chunk))
                chunk = []
            chunk.append(line)
            total += 1
        if chunk:
            await target.reply_text("–î–æ—Å—Ç—É–ø–Ω—ã–µ Mutation:\n" + "\n".join(chunk))
    except Exception as e:
        await target.reply_text(f"–û—à–∏–±–∫–∞ introspect: {escape(str(e))}")
        
async def menu_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE):
    if not await _ensure_connected(u):
        return
    target = u.effective_message
    await target.reply_text(
        "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>",
        parse_mode=ParseMode.HTML,
        reply_markup=main_menu_kb(),
    )
    
def goip_from_session(chat_id: int) -> GoIP:
    s = GOIP_SESS.get(chat_id)
    if s:
        obj = s.get("_obj")
        if isinstance(obj, GoIP):
            return obj
        url = s.get("base_url")
        login = s.get("login")
        pwd = s.get("password")
        verify = bool(s.get("verify", False))
        if url and login and pwd:
            obj = GoIP(url, login, pwd, verify=verify, timeout=8)
            s["_obj"] = obj  # –∫—ç—à–∏—Ä—É–µ–º
            return obj

    s2 = SESS.get(chat_id) or {}
    obj2 = s2.get("goip") or s2.get("GOIP")
    if isinstance(obj2, GoIP):
        return obj2

    raise RuntimeError("GOIP –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω. –°–Ω–∞—á–∞–ª–∞ /goip_connect <url> <login> <password>")

async def goip_connect_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE):
    """
    /goip_connect <url> <login> <password>
    [--radmin <url> <login> <password>]

    –ü—Ä–∏–º–µ—Ä—ã:
    /goip_connect http://185.90.162.63:38017 admin admin3‚Ññ
    /goip_connect http://185.90.162.63:38017 admin admin3‚Ññ --radmin http://185.90.162.63:8086 BaraGeniy BaraVH&SiP!@#
    """
    target = u.effective_message
    if len(c.args) < 3:
        await target.reply_text(
            "–§–æ—Ä–º–∞—Ç—ã:\n"
            "<code>/goip_connect &lt;url&gt; &lt;login&gt; &lt;password&gt;</code>\n"
            "<code>/goip_connect &lt;url&gt; &lt;login&gt; &lt;password&gt; --radmin &lt;url&gt; &lt;login&gt; &lt;password&gt;</code>"
        )
        return

    # –ø–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    raw_args = c.args
    if "--radmin" in raw_args:
        idx = raw_args.index("--radmin")
        goip_args = raw_args[:idx]
        radmin_args = raw_args[idx+1:]
    else:
        goip_args, radmin_args = raw_args, None

    if len(goip_args) < 3:
        await target.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è GOIP.")
        return

    raw_url, login, password = goip_args[0], goip_args[1], " ".join(goip_args[2:])
    verify = not raw_url.startswith("http://")

    try:
        if radmin_args and len(radmin_args) >= 3:
            rurl, rlogin, rpass = radmin_args[0], radmin_args[1], " ".join(radmin_args[2:])
            ok, info = GoIP.warmup_radmin(rurl, rlogin, rpass, verify=not rurl.startswith("http://"))
            await target.reply_text(("‚úÖ " if ok else "‚ö†Ô∏è ") + f"Radmin warmup: {escape(info)}")

        goip = GoIP(raw_url, login, password, verify=verify)
        state, msg, code = goip.check_status()

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
        GOIP_SESS[u.effective_chat.id] = {
            "base_url": goip.base_url,
            "login": login,
            "password": password,
            "verify": verify,
            "_obj": goip,
        }

        if state == GoipStatus.READY:
            await target.reply_text(f"‚úÖ GOIP –ø–æ–¥–∫–ª—é—á–µ–Ω–∞: <code>{goip.status_url}</code>\n{msg}")
            if c.job_queue:
                job_name = f"goip_watch_{u.effective_chat.id}"
                for j in c.job_queue.jobs() or []:
                    if j.name == job_name:
                        j.schedule_removal()
                c.job_queue.run_repeating(
                    _goip_periodic_check,
                    interval=120,
                    first=0,
                    name=job_name,
                    chat_id=u.effective_chat.id
                )

        elif state == GoipStatus.UNAUTHORIZED:
            await target.reply_text(f"‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {msg}")
        else:
            await target.reply_text(f"‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã: {msg}")

    except Exception as e:
        await target.reply_text(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è GOIP: <code>{escape(str(e))}</code>")

async def goip_ping_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE):
    target = u.effective_message
    try:
        goip = goip_from_session(u.effective_chat.id)
        state, msg, code = goip.check_status()
        prefix = "‚úÖ" if state == GoipStatus.READY else ("‚ùå" if state == GoipStatus.UNAUTHORIZED else "‚ö†Ô∏è")
        await target.reply_text(f"{prefix} {msg} (HTTP {code or '‚Äî'})\nURL: <code>{goip.status_url}</code>")
    except Exception as e:
        await target.reply_text(f"–û—à–∏–±–∫–∞ /goip_ping: <code>{escape(str(e))}</code>")

async def goip_whoami_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE):
    target = u.effective_message
    s = GOIP_SESS.get(u.effective_chat.id)
    if not s:
        await target.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π GOIP-—Å–µ—Å—Å–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /goip_connect.")
        return
    await target.reply_text(
        "üìü –¢–µ–∫—É—â–∞—è GOIP-—Å–µ—Å—Å–∏—è\n"
        f"URL: <code>{s['base_url']}</code>\n"
        f"Login: <code>{escape(s['login'])}</code>\n"
        f"TLS verify: <code>{s['verify']}</code>"
    )

async def _goip_periodic_check(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.job.chat_id
    s = GOIP_SESS.get(chat_id)
    if not s:
        return

    goip = GoIP(s["base_url"], s["login"], s["password"], verify=s["verify"])
    state, msg, code = goip.check_status()

    prev = GOIP_STATE_CACHE.get(chat_id)
    if state != prev:
        GOIP_STATE_CACHE[chat_id] = state
        prefix = "‚úÖ" if state == GoipStatus.READY else ("‚ùå" if state == GoipStatus.UNAUTHORIZED else "‚ö†Ô∏è")
        try:
            await context.bot.sendMessage(
                chat_id=chat_id,
                text=f"{prefix} GOIP —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è: {msg} (HTTP {code or '‚Äî'})\nURL: <code>{goip.status_url}</code>"
            )
        except Exception:
            pass

async def goip_start_watch_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE):
    if u.effective_chat.id not in GOIP_SESS:
        await u.effective_message.reply_text("–°–Ω–∞—á–∞–ª–∞ /goip_connect.")
        return
    job_name = f"goip_watch_{u.effective_chat.id}"
    for j in c.job_queue.jobs() or []:
        if j.name == job_name:
            j.schedule_removal()
    c.job_queue.run_repeating(_goip_periodic_check, interval=120, first=0, name=job_name, chat_id=u.effective_chat.id)
    await u.effective_message.reply_text("üîé –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ GOIP –∑–∞–ø—É—â–µ–Ω (–∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã).")
    
async def goip_in_on_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE):
    if not c.args:
        await u.effective_message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /goip_in_on <slot>")
        return
    slot = int(c.args[0])
    goip = goip_from_session(u.effective_chat.id)
    ok, msg = goip.set_incoming_enabled(slot, True)
    await u.effective_message.reply_text(("‚úÖ " if ok else "‚ùå ") + msg)

async def goip_in_off_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE):
    if not c.args:
        await u.effective_message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /goip_in_off <slot>")
        return
    slot = int(c.args[0])
    goip = goip_from_session(u.effective_chat.id)
    ok, msg = goip.set_incoming_enabled(slot, False)
    await u.effective_message.reply_text(("‚úÖ " if ok else "‚ùå ") + msg)
    
async def goip_debug_config_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE):
    goip = goip_from_session(u.effective_chat.id)
    ok, msg = goip.fetch_config_page()
    if ok:
        await u.effective_message.reply_text(
            "‚úÖ –£–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å config.html:\n\n<pre>" + 
            msg[:3500].replace("<", "&lt;").replace(">", "&gt;") + 
            "</pre>",
            parse_mode="HTML"
        )
    else:
        await u.effective_message.reply_text("‚ùå " + msg)        

async def goip_detect_ip_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE):
    """
    /goip_detect_ip
    –ë–µ—Ä—ë—Ç SSH-—Ö–æ—Å—Ç/–ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å –∏–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ (/connect ... ssh_login ssh_password)
    –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: goip32sell / goip32sell_incoming
    """
    target = u.effective_message

    # –¥–æ—Å—Ç–∞—ë–º SSH –∏–∑ —Å–µ—Å—Å–∏–∏
    s = SESS.get(u.effective_chat.id) or {}
    ssh = s.get("ssh")
    if not ssh:
        await target.reply_text(
            "‚ùå SSH-–¥–æ—Å—Ç—É–ø –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.\n"
            "–ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π:\n"
            "<code>/connect &lt;host&gt; &lt;client_id&gt; &lt;client_secret&gt; &lt;ssh_login&gt; &lt;ssh_password&gt;</code>"
        )
        return

    ssh_host = ssh.get("host")
    ssh_login = ssh.get("user")
    ssh_password = ssh.get("password")

    endpoint_primary = "goip32sell"
    endpoint_incoming = "goip32sell_incoming"

    try:
        await target.chat.send_action(ChatAction.TYPING)

        best_ip, ips = fetch_goip_ips_via_ssh(
            host=ssh_host,
            username=ssh_login,
            password=ssh_password,
            endpoint_primary=endpoint_primary,
            endpoint_incoming=endpoint_incoming,
        )

        if not ips:
            await target.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å IP –≤ PJSIP.\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ endpoints —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏ Asterisk —Å–µ–π—á–∞—Å –≤–∏–¥–∏—Ç –∫–æ–Ω—Ç–∞–∫—Ç—ã."
            )
            return

        lines = [f"üîé –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã IP (–ø–æ –ø–æ—Ä—è–¥–∫—É –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞): {', '.join(ips)}"]
        lines.append(f"‚úÖ –¢–µ–∫—É—â–∏–π (best): <b>{best_ip}</b>")
        lines.append(
            f"Endpoints: <code>{endpoint_primary}</code> / <code>{endpoint_incoming}</code>"
        )
        await target.reply_text("\n".join(lines), parse_mode=ParseMode.HTML)

    except Exception as e:
        await target.reply_text(f"–û—à–∏–±–∫–∞ detect: <code>{escape(str(e))}</code>")
      
async def pjsip_endpoints_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE):
    """
    /pjsip_endpoints <ssh_host> <ssh_login> <ssh_password> [filter]
    –ü—Ä–∏–º–µ—Ä—ã:
      /pjsip_endpoints 185.90.162.63 root mypass
      /pjsip_endpoints https://185.90.162.63 root mypass goip
    """
    target = u.effective_message
    if len(c.args) < 3:
        await target.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
            "<code>/pjsip_endpoints &lt;ssh_host&gt; &lt;ssh_login&gt; &lt;ssh_password&gt; [filter]</code>\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/pjsip_endpoints 185.90.162.63 root S3cr3t goip</code>\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è <code>http://</code> –∏ <code>https://</code> –≤ —Ö–æ—Å—Ç–µ ‚Äî —è –∏—Ö –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É—é –¥–ª—è SSH."
        )
        return

    ssh_host = c.args[0]
    ssh_login = c.args[1]
    ssh_password = c.args[2]
    flt = c.args[3].lower() if len(c.args) >= 4 else None

    try:
        await target.chat.send_action(ChatAction.TYPING)
        names = fetch_pjsip_endpoints_via_ssh(ssh_host, ssh_login, ssh_password)
        if flt:
            names = [n for n in names if flt in n.lower()]
        if not names:
            await target.reply_text("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ endpoint‚Äô–∞ (–ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º).")
            return

        # –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –ø–æ—Ä–µ–∂–µ–º –Ω–∞ —á–∞–Ω–∫–∏, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram
        header = "üìã PJSIP endpoints:\n"
        chunk, acc = [], len(header)
        for name in names:
            line = f"- {name}\n"
            if acc + len(line) > 3500:
                await target.reply_text(header + "".join(chunk))
                chunk, acc = [], len(header)
            chunk.append(line); acc += len(line)
        if chunk:
            await target.reply_text(header + "".join(chunk))

        # –ø–æ–¥—Å–∫–∞–∑–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
        tip = "–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏: <code>/pjsip_show &lt;host&gt; &lt;login&gt; &lt;pass&gt; &lt;endpoint&gt;</code>"
        await target.reply_text(tip)
    except Exception as e:
        await target.reply_text(f"–û—à–∏–±–∫–∞ /pjsip_endpoints: <code>{escape(str(e))}</code>")

async def pjsip_show_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE):
    """
    /pjsip_show <ssh_host> <ssh_login> <ssh_password> <endpoint>
    –ü—Ä–∏–º–µ—Ä:
      /pjsip_show 185.90.162.63 root S3cr3t goip32sell
    """
    target = u.effective_message
    if len(c.args) < 4:
        await target.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
            "<code>/pjsip_show &lt;ssh_host&gt; &lt;ssh_login&gt; &lt;ssh_password&gt; &lt;endpoint&gt;</code>"
        )
        return

    ssh_host = c.args[0]
    ssh_login = c.args[1]
    ssh_password = c.args[2]
    endpoint = c.args[3]

    try:
        await target.chat.send_action(ChatAction.TYPING)
        raw = fetch_endpoint_raw_via_ssh(ssh_host, ssh_login, ssh_password, endpoint)
        # –æ–±—Ä–µ–∂–µ–º –¥–æ 3500 —Å–∏–º–≤–æ–ª–æ–≤ –∏ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º
        shown = raw[:3500].replace("<", "&lt;").replace(">", "&gt;")
        suffix = "" if len(raw) <= 3500 else "\n\n‚Ä¶(–æ–±—Ä–µ–∑–∞–Ω–æ)"
        await target.reply_text(
            f"üîé <b>pjsip show endpoint {escape(endpoint)}</b>\n\n<pre>{shown}</pre>{suffix}",
            parse_mode=ParseMode.HTML
        )
        # –º–∞–ª–µ–Ω—å–∫–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞, –∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å IP –ø–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        await target.reply_text(
            "–ü–æ–¥—Å–∫–∞–∑–∫–∞: –∫–æ–≥–¥–∞ –Ω–∞–π–¥—ë–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint, –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–≤—Ç–æ-–≤—ã–≤–æ–¥ IP —á–µ—Ä–µ–∑ /goip_detect_ip."
        )
    except Exception as e:
        await target.reply_text(f"–û—à–∏–±–∫–∞ /pjsip_show: <code>{escape(str(e))}</code>")
        
async def set_incoming_sip_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE):
    """
    /set_incoming_sip
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:
      1) –ë–µ—Ä—ë—Ç SSH-—Ö–æ—Å—Ç/–ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å –∏–∑ —Å–µ—Å—Å–∏–∏ (/connect ... ssh_login ssh_password)
      2) –î–µ—Ç–µ–∫—Ç–∏—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π IP GOIP –∏–∑ Asterisk (pjsip show endpoint/contacts)
      3) –û–±–Ω–æ–≤–ª—è–µ—Ç pjsip.sip_server —É —Ç—Ä–∞–Ω–∫–∞ goip32sell_incoming –Ω–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã–π IP
      4) –î–µ–ª–∞–µ—Ç fwconsole reload
    """
    target = u.effective_message

    # 0) –ü—Ä–æ–≤–µ—Ä–∏–º SSH –≤ —Å–µ—Å—Å–∏–∏
    s = SESS.get(u.effective_chat.id) or {}
    ssh = s.get("ssh")
    if not ssh:
        await target.reply_text(
            "‚ùå SSH-–¥–æ—Å—Ç—É–ø –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π:\n"
            "<code>/connect &lt;host&gt; &lt;client_id&gt; &lt;client_secret&gt; &lt;ssh_login&gt; &lt;ssh_password&gt;</code>"
        )
        return

    ssh_host = ssh.get("host")
    ssh_login = ssh.get("user")
    ssh_password = ssh.get("password")

    endpoint_primary = "goip32sell"
    endpoint_incoming = "goip32sell_incoming"

    try:
        await target.chat.send_action(ChatAction.TYPING)

        # 1) –î–µ—Ç–µ–∫—Ç IP —Ç–∞–∫ –∂–µ, –∫–∞–∫ –¥–µ–ª–∞–µ—Ç /goip_detect_ip
        best_ip, ips = fetch_goip_ips_via_ssh(
            host=ssh_host,
            username=ssh_login,
            password=ssh_password,
            endpoint_primary=endpoint_primary,
            endpoint_incoming=endpoint_incoming,
        )

        if not ips or not best_ip:
            await target.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å IP –≤ PJSIP.\n"
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ endpoints —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏ Asterisk —Å–µ–π—á–∞—Å –≤–∏–¥–∏—Ç –∫–æ–Ω—Ç–∞–∫—Ç—ã."
            )
            return

        # –ª—ë–≥–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ IP
        if not re.match(r"^\d{1,3}(\.\d{1,3}){3}$", best_ip):
            await target.reply_text(
                f"‚ùå –î–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω –Ω–µ–ø–æ—Ö–æ–∂–∏–π –Ω–∞ IPv4 –∞–¥—Ä–µ—Å: <code>{escape(best_ip)}</code>"
            )
            return

        # 2) –û–±–Ω–æ–≤–ª—è–µ–º sip_server —É goip32sell_incoming
        report = set_incoming_trunk_sip_server_via_ssh(
            host=ssh_host,
            username=ssh_login,
            password=ssh_password,
            trunk_name=endpoint_incoming,
            new_ip=best_ip,
        )

        # 3) –û—Ç—á—ë—Ç
        lines = []
        if ips:
            lines.append("üîé –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã IP (–ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É): " + ", ".join(ips))
        lines.append(f"‚úÖ –í—ã–±—Ä–∞–Ω (best): <b>{best_ip}</b>")
        lines.append(
            "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª–µ <b>sip_server</b> —É —Ç—Ä–∞–Ω–∫–∞ "
            f"<code>{endpoint_incoming}</code>\n"
            f"ID: <code>{report.get('trunk_id')}</code>\n"
            f"–°—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <code>{escape(report.get('old_value', '') or '<empty>')}</code>\n"
            f"–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <code>{escape(report.get('new_value', '') or '<empty>')}</code>\n"
            "üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω <code>fwconsole reload</code>."
        )
        await target.reply_text("\n".join(lines), parse_mode=ParseMode.HTML)

    except SSHExecError as e:
        await target.reply_text(f"‚ùå SSH/Bash –æ—à–∏–±–∫–∞: <code>{escape(str(e))}</code>")
    except Exception as e:
        await target.reply_text(f"‚ùå –û—à–∏–±–∫–∞: <code>{escape(str(e))}</code>")

async def set_secret_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE):
    target = u.effective_message

    if not c.args:
        await target.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
            "<code>/set_secret &lt;ext|targets&gt; [fixed_pass] [--also-ext]</code>\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "<code>/set_secret 301</code>\n"
            "<code>/set_secret 301 MyPass --also-ext</code>\n"
            "<code>/set_secret 401-418</code>\n"
            "<code>/set_secret 401 402 410-418 MyOnePass --also-ext</code>",
            parse_mode=ParseMode.HTML,
        )
        return

    if not await _ensure_connected(u):
        return

    # ---- –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤: —Ü–µ–ª–∏, –æ–±—â–∏–π –ø–∞—Ä–æ–ª—å (–æ–ø—Ü.), —Ñ–ª–∞–≥ also-ext
    raw = c.args[:]
    also_ext = False
    if "--also-ext" in raw:
        also_ext = True
        raw.remove("--also-ext")

    target_tokens = []
    fixed_pass = None
    for tok in raw:
        if re.fullmatch(r"\d+(-\d+)?", tok):
            target_tokens.append(tok)
        else:
            fixed_pass = tok
            # –æ—Å—Ç–∞–ª—å–Ω–æ–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º (–∫—Ä–æ–º–µ —Ä–∞–Ω–µ–µ —Å–Ω—è—Ç–æ–≥–æ --also-ext)
            break

    if not target_tokens:
        await target.reply_text(
            "‚ùó –£–∫–∞–∂–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω EXT –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω. –ü—Ä–∏–º–µ—Ä: <code>/set_secret 401 402 410-418</code>",
            parse_mode=ParseMode.HTML,
        )
        return

    # –°–ø–∏—Å–æ–∫ EXT
    exts = parse_targets(" ".join(target_tokens))
    if not exts:
        await target.reply_text("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ü–µ–ª–∏.", parse_mode=ParseMode.HTML)
        return

    # ---- SSH –∏–∑ —Å–µ—Å—Å–∏–∏
    s = SESS.get(u.effective_chat.id) or {}
    ssh = s.get("ssh")
    if not ssh:
        await target.reply_text(
            "‚ùå SSH-–¥–æ—Å—Ç—É–ø –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å:\n"
            "<code>/connect &lt;host&gt; &lt;client_id&gt; &lt;client_secret&gt; &lt;ssh_login&gt; &lt;ssh_password&gt;</code>",
            parse_mode=ParseMode.HTML,
        )
        return
    ssh_host, ssh_user, ssh_pass = ssh.get("host"), ssh.get("user"), ssh.get("password")

    total = len(exts)
    notice = await target.reply_text(f"‚è≥ –ú–µ–Ω—è—é –ø–∞—Ä–æ–ª–∏‚Ä¶ (0/{total})")
    try:
        await target.chat.send_action(ChatAction.TYPING)

        # –û–¥–∏–Ω –ø—Ä–æ—Ö–æ–¥: –ø–∏—à–µ–º secret –±–µ–∑ reload; reload —Å–¥–µ–ª–∞–µ–º –æ–¥–∏–Ω —Ä–∞–∑ –≤ –∫–æ–Ω—Ü–µ
        reports = []   # –¥–ª—è —Å–ª—É—á–∞—è –æ–¥–Ω–æ–≥–æ EXT ‚Äî –ø–æ–∫–∞–∂–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç
        ok, failed = [], []

        async def _progress(i):
            if i % 5 == 0 or i == total:
                try:
                    await notice.edit_text(f"‚è≥ –ú–µ–Ω—è—é –ø–∞—Ä–æ–ª–∏‚Ä¶ ({i}/{total})")
                except Exception:
                    pass

        for i, ext in enumerate(exts, 1):
            try:
                pwd = fixed_pass or _gen_secret()
                rep = set_extension_chansip_secret_via_ssh(
                    host=ssh_host, username=ssh_user, password=ssh_pass,
                    extension=ext, new_secret=pwd,
                    do_reload=False  # –≤–∞–∂–Ω.: –µ–¥–∏–Ω—ã–π reload –≤ –∫–æ–Ω—Ü–µ
                )
                reports.append((rep, pwd))
                # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤ GraphQL
                if also_ext:
                    try:
                        fb = fb_from_session(u.effective_chat.id)
                        fb.set_ext_password(ext, pwd)
                    except Exception:
                        pass
                ok.append(ext)
            except Exception as e:
                failed.append(f"{ext} ({str(e)[:60]})")

            await _progress(i)
            await asyncio.sleep(0)

        # –ï–î–ò–ù–´–ô reload
        try:
            await notice.edit_text("üîÑ –ü—Ä–∏–º–µ–Ω—è—é –∫–æ–Ω—Ñ–∏–≥ (Apply Config)‚Ä¶")
        except Exception:
            pass
        _ssh_run(ssh_host, ssh_user, ssh_pass, "fwconsole reload", timeout=30)

        # –ò—Ç–æ–≥
        if total == 1 and reports:
            # –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç –∫–∞–∫ —Ä–∞–Ω—å—à–µ
            rep, _pwd = reports[0]
            tech = rep.get("tech") or "chan_sip"
            old_val = (rep.get("old_value") or "")[:70]
            new_val = rep.get("new_value") or ""
            lines = [
                f"üîê <b>Extension {escape(rep['ext'])}</b> (<code>{escape(tech)}</code>)",
                f"–°—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å: <code>{escape(old_val) or '&lt;empty&gt;'}</code>",
                f"–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: <code>{escape(new_val)}</code>",
                "‚úÖ –ü—Ä–∏–º–µ–Ω—ë–Ω <code>fwconsole reload</code>.",
            ]
            if rep.get("md5_present"):
                lines.append("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω <code>md5_cred</code>. –ö–ª–∏–µ–Ω—Ç/GUI –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å MD5 –≤–º–µ—Å—Ç–æ –æ–±—ã—á–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è.")
            if also_ext:
                lines.append("üîÅ –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—ë–Ω <code>extPassword</code> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (GraphQL).")
            await target.reply_text("\n".join(lines), parse_mode=ParseMode.HTML)
        else:
            # —Å–≤–æ–¥–∫–∞ –ø–æ –±–∞—Ç—á—É
            try:
                await notice.edit_text("‚úÖ –ö–æ–Ω—Ñ–∏–≥ –ø—Ä–∏–º–µ–Ω—ë–Ω. –§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á—ë—Ç‚Ä¶", parse_mode=ParseMode.HTML)
            except Exception:
                pass
            parts = []
            if ok:
                parts.append("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã: " + ", ".join(ok))
            if failed:
                parts.append("‚ùå –û—à–∏–±–∫–∏: " + ", ".join(failed))
            if not parts:
                parts.append("–ù–µ—á–µ–≥–æ –¥–µ–ª–∞—Ç—å.")
            if also_ext:
                parts.append("‚ÑπÔ∏è –¢–∞–∫–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω <code>extPassword</code> –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö EXT.")
            await target.reply_text("\n".join(parts), parse_mode=ParseMode.HTML)

    except SSHExecError as e:
        try:
            await notice.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª–µ–π.")
        except Exception:
            pass
        await target.reply_text(f"‚ùå SSH/SQL –æ—à–∏–±–∫–∞: <code>{escape(str(e))}</code>", parse_mode=ParseMode.HTML)
    except Exception as e:
        try:
            await notice.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª–µ–π.")
        except Exception:
            pass
        await target.reply_text(f"‚ùå –û—à–∏–±–∫–∞: <code>{escape(str(e))}</code>", parse_mode=ParseMode.HTML)

async def radmin_restart_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE):
    target = u.effective_message

    s = SESS.get(u.effective_chat.id) or {}
    ssh = s.get("ssh")
    if not ssh:
        await target.reply_text(
            "‚ùå SSH-–¥–æ—Å—Ç—É–ø –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å:\n"
            "<code>/connect &lt;host&gt; &lt;client_id&gt; &lt;client_secret&gt; &lt;ssh_login&gt; &lt;ssh_password&gt;</code>",
            parse_mode=ParseMode.HTML,
        )
        return

    host, user, pwd = ssh.get("host"), ssh.get("user"), ssh.get("password")

    notice = await target.reply_text("‚è≥ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é radmsrv‚Ä¶")
    try:
        await target.chat.send_action(ChatAction.TYPING)

        stop_out = ""
        try:
            stop_out = _ssh_run(host, user, pwd, "killall radmsrv || true", timeout=10)
        except Exception as e:
            stop_out = str(e)

        try:
            await notice.edit_text("‚è≥ –ó–∞–ø—É—Å–∫–∞—é radmsrv‚Ä¶")
        except Exception:
            pass

        start_cmd = r"nohup /root/radmsrv/run_radmsrv >/dev/null 2>&1 & echo $!"
        pid = _ssh_run(host, user, pwd, start_cmd, timeout=10).strip()

        await asyncio.sleep(1.0)
        ps = _ssh_run(host, user, pwd, "pgrep -fa radmsrv | head -n 3", timeout=10).strip()

        txt = [
            "‚úÖ <b>radmsrv –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω</b>",
            f"PID: <code>{escape(pid or '‚Äî')}</code>",
        ]
        if ps:
            txt.append("<b>–ü—Ä–æ—Ü–µ—Å—Å—ã:</b>\n<pre>" + escape(ps[:1200]) + "</pre>")
        await notice.edit_text("\n".join(txt), parse_mode=ParseMode.HTML)

    except SSHExecError as e:
        try:
            await notice.edit_text("‚ùå –û—à–∏–±–∫–∞ SSH.")
        except Exception:
            pass
        await target.reply_text(f"‚ùå SSH –æ—à–∏–±–∫–∞: <code>{escape(str(e))}</code>", parse_mode=ParseMode.HTML)
    except Exception as e:
        try:
            await notice.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å radmsrv.")
        except Exception:
            pass
        await target.reply_text(f"‚ùå –û—à–∏–±–∫–∞: <code>{escape(str(e))}</code>", parse_mode=ParseMode.HTML)

async def add_outbound_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE):
    """
    /add_outbound <name> <prepend_range> [--cid <range>] [--trunks <name1,name2,...>] [--p1 X.] [--p2 XXXX]
    –ü—Ä–∏–º–µ—Ä—ã:
      /add_outbound test 001-032 --cid 001-032 --trunks goip32sell
      /add_outbound test 001-032 --trunks goip32sell,backuptrunk
      /add_outbound test 001-032 --p1 X. --p2 XXXX
    –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: callerid_range = prepend_range; p1='X.'; p2='XXXX'
    –ü–∞—á–∫–∞ 1: prepend='NNN+' / pattern=p1
    –ü–∞—á–∫–∞ 2: prepend='NNN'   / pattern=p2
    """
    target = u.effective_message
    if not await _ensure_connected(u):
        return

    if len(c.args) < 2:
        await target.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
            "<code>/add_outbound &lt;name&gt; &lt;prepend_range&gt; [--cid &lt;range&gt;] [--trunks name1,name2] [--p1 X.] [--p2 XXXX]</code>\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/add_outbound test 001-032 --cid 001-032 --trunks goip32sell</code>"
        )
        return

    name = c.args[0]
    prepend_range = c.args[1]

    # –¥–µ—Ñ–æ–ª—Ç—ã
    cid_range = None
    trunks = []
    p1 = "X."
    p2 = "XXXX"

    # —Ä–∞–∑–±–æ—Ä —Ñ–ª–∞–≥–æ–≤
    raw = c.args[2:]
    i = 0
    while i < len(raw):
        tok = raw[i]
        if tok == "--cid" and i + 1 < len(raw):
            cid_range = raw[i+1]; i += 2
        elif tok == "--trunks" and i + 1 < len(raw):
            trunks = [x.strip() for x in raw[i+1].split(",") if x.strip()]
            i += 2
        elif tok == "--p1" and i + 1 < len(raw):
            p1 = raw[i+1]; i += 2
        elif tok == "--p2" and i + 1 < len(raw):
            p2 = raw[i+1]; i += 2
        else:
            i += 1

    # SSH –∏–∑ —Å–µ—Å—Å–∏–∏
    s = SESS.get(u.effective_chat.id) or {}
    ssh = s.get("ssh")
    if not ssh:
        await target.reply_text(
            "‚ùå SSH-–¥–æ—Å—Ç—É–ø –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å:\n"
            "<code>/connect &lt;host&gt; &lt;client_id&gt; &lt;client_secret&gt; &lt;ssh_login&gt; &lt;ssh_password&gt;</code>"
        )
        return
    ssh_host, ssh_user, ssh_pass = ssh.get("host"), ssh.get("user"), ssh.get("password")

    notice = await target.reply_text("‚è≥ –°–æ–∑–¥–∞—é outbound route‚Ä¶")
    try:
        await target.chat.send_action(ChatAction.TYPING)
        rep = create_outbound_route_with_ranges_via_ssh(
            host=ssh_host,
            username=ssh_user,
            password=ssh_pass,
            route_name=name,
            prepend_range=prepend_range,
            callerid_range=cid_range,
            pattern_first=p1,
            pattern_second=p2,
            trunk_names=trunks or None,
        )
        txt = [
            f"‚úÖ –°–æ–∑–¥–∞–Ω –º–∞—Ä—à—Ä—É—Ç: <b>{escape(rep['route_name'])}</b> (ID: <code>{escape(rep['route_id'])}</code>)",
            f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ Dial Patterns: <code>{rep['patterns_created']}</code>",
        ]
        if rep.get("trunks_bound"):
            txt.append("üîó –ü—Ä–∏–≤—è–∑–∞–Ω—ã —Ç—Ä–∞–Ω–∫–∏: " + ", ".join(rep["trunks_bound"]))
        txt.append("üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω <code>fwconsole reload</code>.")
        await notice.edit_text("\n".join(txt), parse_mode=ParseMode.HTML)
    except SSHExecError as e:
        try: await notice.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞.")
        except Exception: pass
        await target.reply_text(f"SSH/SQL: <code>{escape(str(e))}</code>", parse_mode=ParseMode.HTML)
    except Exception as e:
        try: await notice.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞.")
        except Exception: pass
        await target.reply_text(f"–û—à–∏–±–∫–∞: <code>{escape(str(e))}</code>", parse_mode=ParseMode.HTML)


async def on_startup(app):
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –ù–∞–±–µ—Ä–∏ /help –≤ Telegram –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.")
    log.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏: /help")

    if ADMIN_CHAT_ID:
        try:
            await app.bot.send_message(int(ADMIN_CHAT_ID), "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –ù–∞–ø–∏—à–∏—Ç–µ /help.")
        except Exception as e:
            log.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {e}")

    try:
        await app.bot.delete_my_commands()  # default
        await app.bot.delete_my_commands(scope=BotCommandScopeAllPrivateChats())
        await app.bot.delete_my_commands(scope=BotCommandScopeAllGroupChats())
        await app.bot.delete_my_commands(scope=BotCommandScopeAllChatAdministrators())

        commands = [
            BotCommand("start", "–ó–∞–ø—É—Å–∫"),
            BotCommand("help", "–ü–æ–º–æ—â—å"),
            BotCommand("connect", "–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ FreePBX"),
            BotCommand("menu", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
            BotCommand("list", "–°–ø–∏—Å–æ–∫ EXT"),
            BotCommand("create", "–°–æ–∑–¥–∞—Ç—å –ø–æ –±–∞–∑–µ"),
            BotCommand("add", "–î–æ–±–∞–≤–∏—Ç—å EXT/–¥–∏–∞–ø–∞–∑–æ–Ω"),
            BotCommand("del", "–£–¥–∞–ª–∏—Ç—å EXT/–¥–∏–∞–ø–∞–∑–æ–Ω"),
            BotCommand("del_eq", "–£–¥–∞–ª–∏—Ç—å –ø–æ –±–∞–∑–µ (100 –Ω–æ–º–µ—Ä–æ–≤)"),
            BotCommand("del_all", "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ EXT"),
            BotCommand("add_inbound", "–°–æ–∑–¥–∞—Ç—å inbound (EXT/–¥–∏–∞–ø–∞–∑–æ–Ω)"),
            BotCommand("del_inbound", "–£–¥–∞–ª–∏—Ç—å inbound –ø–æ DID"),
            BotCommand("list_routes", "–°–ø–∏—Å–æ–∫ inbound –º–∞—Ä—à—Ä—É—Ç–æ–≤"),
            BotCommand("reconnect", "–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è"),
            BotCommand("ping", "–ü—Ä–æ–≤–µ—Ä–∫–∞ GraphQL"),
            BotCommand("whoami", "–¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è"),
            BotCommand("logout", "–°–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏"),

        ]

        await app.bot.set_my_commands(commands)  # default
        await app.bot.set_my_commands(commands, scope=BotCommandScopeAllPrivateChats())
        await app.bot.set_my_commands(commands, scope=BotCommandScopeAllGroupChats())
        await app.bot.set_my_commands(commands, scope=BotCommandScopeAllChatAdministrators())

        try:
            await app.bot.set_chat_menu_button()
        except Exception:
            pass
    except Exception as e:
        print(f"set_my_commands failed: {e}")