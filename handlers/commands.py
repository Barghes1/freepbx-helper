# src/handlers/commands.py
import os
import re
import time
import asyncio
import secrets
import logging
from html import escape
from typing import Dict, List, Tuple, Optional
from urllib.parse import urlparse

from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from telegram.constants import ParseMode, ChatAction

from core.freepbx import FreePBX, AlreadyExists
from ui.texts import HELP_TEXT, _list_nav_kb, _list_page_text
from utils.common import clean_url, equip_start, parse_targets, next_free

log = logging.getLogger(__name__)

# ----- Session / settings -----
SESS: Dict[int, dict] = {}
PAGE_SIZE = 50
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")


# ===== Internal helpers =====
def fb_from_session(chat_id: int) -> FreePBX:
    s = SESS.get(chat_id)
    if not s:
        raise RuntimeError("–°–Ω–∞—á–∞–ª–∞ /connect <ip> <login> <password>")
    fb = FreePBX(s["base_url"], s["client_id"], s["client_secret"], verify=s["verify"])
    fb.token = s.get("token")
    fb.token_exp = s.get("token_exp", 0)
    return fb

def _need_connect_text() -> str:
    return "–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å:\n<code>/connect &lt;ip&gt; &lt;login&gt; &lt;password&gt;</code>"

async def _ensure_connected(u: Update) -> bool:
    chat = u.effective_chat
    if chat and chat.id in SESS:
        return True
    if getattr(u, "message", None):
        await u.message.reply_text(_need_connect_text())
    elif getattr(u, "callback_query", None):
        await u.callback_query.answer("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å: /connect <ip> <login> <password>", show_alert=True)
    return False

def _slice_pairs(pairs, page: int, page_size: int = PAGE_SIZE):
    total = len(pairs)
    pages = max(1, (total + page_size - 1) // page_size)
    page = max(0, min(page, pages - 1))
    start = page * page_size
    end = start + page_size
    return pairs[start:end], page, pages


# ===== Commands =====
async def start_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE):
    kb = ReplyKeyboardMarkup(
        [
            ["/help", "/connect"],
            ["/list", "/create 4 10"],
            ["/del_eq 4", "/del_all"]
        ],
        resize_keyboard=True
    )
    await u.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —É–ø—Ä–∞–≤–ª—è—Ç—å FreePBX: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, —Å–ø–∏—Å–æ–∫ SIP, —Å–æ–∑–¥–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ.\n"
        "–ù–∞–±–µ—Ä–∏ /help –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.",
        reply_markup=kb
    )

async def help_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE):
    await u.message.reply_text(HELP_TEXT)

async def connect_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE):
    if len(c.args) < 3:
        await u.message.reply_text(
            "–§–æ—Ä–º–∞—Ç:\n"
            "<code>/connect &lt;ip&gt; &lt;login&gt; &lt;password&gt;</code>\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/connect http://77.105.146.189 CID SECRET</code>"
        )
        return

    raw_ip, login, password = c.args[0], c.args[1], c.args[2]
    parsed = urlparse(raw_ip)
    if not parsed.scheme:
        base_url = f"http://{raw_ip}"
        verify = False
    else:
        base_url = raw_ip
        verify = not base_url.startswith("http://")

    await u.message.chat.send_action(ChatAction.TYPING)
    fb = FreePBX(base_url, login, password, verify=verify)
    try:
        fb.ensure_token()
        SESS[u.effective_chat.id] = {
            "base_url": fb.base_url,
            "client_id": login,
            "client_secret": password,
            "verify": verify,
            "token": fb.token,
            "token_exp": fb.token_exp,
        }

        pairs = fb.fetch_all_extensions()
        c.user_data["__last_pairs"] = pairs
        pairs_page, page, pages = _slice_pairs(pairs, page=0)
        text = _list_page_text(clean_url(fb.base_url), pairs_page)

        kb = _list_nav_kb(page, pages)

        await u.message.reply_text(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ <code>{escape(fb.base_url)}</code>")
        await u.message.reply_text(text, reply_markup=kb)
    except Exception as e:
        await u.message.reply_text(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: <code>{escape(str(e))}</code>")

async def list_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE):
    if not await _ensure_connected(u):
        return
    try:
        fb = fb_from_session(u.effective_chat.id)
        pairs = fb.fetch_all_extensions()
        c.user_data["__last_pairs"] = pairs
        pairs_page, page, pages = _slice_pairs(pairs, page=0)
        await u.message.reply_text(
            _list_page_text(clean_url(fb.base_url), pairs_page),
            reply_markup=_list_nav_kb(page, pages)
        )
    except Exception as e:
        await u.message.reply_text(f"–û—à–∏–±–∫–∞: <code>{escape(str(e))}</code>")

async def create_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE):
    if len(c.args) < 2:
        await u.message.reply_text(
            "‚ùó –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:\n"
            "<code>/create &lt;–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ&gt; &lt;–∫–æ–ª-–≤–æ&gt;</code>\n\n"
            "–ì–¥–µ <b>–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ</b> ‚Äî –Ω–æ–º–µ—Ä –±–∞–∑—ã (—Å—Ç–∞—Ä—Ç EXT):\n"
            "‚Ä¢ 1 ‚Üí 101‚Ä¶\n‚Ä¢ 2 ‚Üí 201‚Ä¶\n‚Ä¢ 3 ‚Üí 301‚Ä¶\n‚Ä¢ 4 ‚Üí 401‚Ä¶\n‚Ä¢ 10 ‚Üí 1001‚Ä¶\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n<code>/create 4 10</code> ‚Äî —Å–æ–∑–¥–∞—Å—Ç 10 –ª–∏–Ω–∏–π, –Ω–∞—á–∏–Ω–∞—è —Å 401.\n",
        )
        return
    if not await _ensure_connected(u):
        return

    try:
        eq = int(c.args[0])
        cnt = int(c.args[1])
    except Exception:
        await u.message.reply_text(
            "‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π: <code>/create &lt;–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ&gt; &lt;–∫–æ–ª-–≤–æ&gt;</code>\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>/create 4 10</code>"
        )
        return

    fb = fb_from_session(u.effective_chat.id)
    try:
        notice = await u.message.reply_text(f"‚è≥ –°–æ–∑–¥–∞—é {cnt} –ª–∏–Ω–∏–π‚Ä¶ (0/{cnt})")
        await u.message.chat.send_action(ChatAction.TYPING)

        all_pairs = fb.fetch_all_extensions()
        existing = [ext for ext, _ in all_pairs]
        start = equip_start(eq)
        targets = next_free(existing, start, cnt)

        for i, ext in enumerate(targets, 1):
            fb.create_one(int(ext))
            secret = secrets.token_hex(16)
            fb.set_ext_password(ext, secret)
            if i % 5 == 0 or i == cnt:
                try:
                    await notice.edit_text(f"‚è≥ –°–æ–∑–¥–∞—é {cnt} –ª–∏–Ω–∏–π‚Ä¶ ({i}/{cnt})")
                except Exception:
                    pass
            await asyncio.sleep(0)

        if targets:
            try:
                try:
                    await notice.edit_text("üîÑ –ü—Ä–∏–º–µ–Ω—è—é –∫–æ–Ω—Ñ–∏–≥ (Apply Config)‚Ä¶")
                except Exception:
                    pass
                fb.apply_config()
                try:
                    await notice.edit_text("‚úÖ –ö–æ–Ω—Ñ–∏–≥ –ø—Ä–∏–º–µ–Ω—ë–Ω. –û–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–æ–∫‚Ä¶")
                except Exception:
                    pass
            except Exception as e:
                await u.message.reply_text(f"‚ö†Ô∏è Apply Config –Ω–µ —É–¥–∞–ª–æ—Å—å: <code>{escape(str(e))}</code>")

        pairs = fb.fetch_all_extensions()
        pairs_page, page, pages = _slice_pairs(pairs, page=0)
        c.user_data["__last_pairs"] = pairs
        await u.message.reply_text(
            _list_page_text(clean_url(fb.base_url), pairs_page),
            reply_markup=_list_nav_kb(page, pages)
        )
    except Exception as e:
        await u.message.reply_text(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: <code>{escape(str(e))}</code>")

async def del_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE):
    if not c.args:
        await u.message.reply_text("–§–æ—Ä–º–∞—Ç: /del 401 402 410-418")
        return
    if not await _ensure_connected(u):
        return

    fb = fb_from_session(u.effective_chat.id)
    requested = parse_targets(" ".join(c.args))
    try:
        await u.message.chat.send_action(ChatAction.TYPING)
        by_ext, _, _ = fb.fetch_ext_index()
        existing = set(by_ext.keys())

        targets = [x for x in requested if x in existing]
        missing = [x for x in requested if x not in existing]

        total = len(targets)
        notice = await u.message.reply_text(f"‚è≥ –£–¥–∞–ª—è—é –ª–∏–Ω–∏–∏‚Ä¶ (0/{total})") if total else None

        ok, failed = [], []
        for i, ext in enumerate(targets, 1):
            try:
                fb.delete_extension(ext)
                ok.append(ext)
            except Exception:
                failed.append(ext)
            if notice and (i % 10 == 0 or i == total):
                try:
                    await notice.edit_text(f"‚è≥ –£–¥–∞–ª—è—é –ª–∏–Ω–∏–∏‚Ä¶ ({i}/{total})")
                except Exception:
                    pass
            await asyncio.sleep(0)

        parts = []
        if ok:
            parts.append("üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ: " + ", ".join(ok))
        if missing:
            parts.append("‚Ü©Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ—Ç —Ç–∞–∫–æ–π –ª–∏–Ω–∏–∏): " + ", ".join(missing))
        if failed:
            parts.append("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: " + ", ".join(failed))
        if not parts:
            parts.append("–ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å.")
        await u.message.reply_text("\n".join(parts))

        if ok:
            try:
                if notice:
                    try:
                        await notice.edit_text("üîÑ –ü—Ä–∏–º–µ–Ω—è—é –∫–æ–Ω—Ñ–∏–≥ (Apply Config)‚Ä¶")
                    except Exception:
                        pass
                fb.apply_config()
                if notice:
                    try:
                        await notice.edit_text("‚úÖ –ö–æ–Ω—Ñ–∏–≥ –ø—Ä–∏–º–µ–Ω—ë–Ω. –û–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–æ–∫‚Ä¶")
                    except Exception:
                        pass
            except Exception as e:
                await u.message.reply_text(f"‚ö†Ô∏è Apply Config –Ω–µ —É–¥–∞–ª–æ—Å—å: <code>{escape(str(e))}</code>")

        pairs = fb.fetch_all_extensions()
        c.user_data["__last_pairs"] = pairs
        page_items, page, pages = _slice_pairs(pairs, page=0)
        await u.message.reply_text(
            _list_page_text(clean_url(fb.base_url), page_items),
            reply_markup=_list_nav_kb(page, pages)
        )
    except Exception as e:
        await u.message.reply_text(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: <code>{escape(str(e))}</code>")

async def del_eq_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE):
    if not c.args:
        await u.message.reply_text("–§–æ—Ä–º–∞—Ç: /del_eq <–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ>")
        return
    if not await _ensure_connected(u):
        return
    eq = int(c.args[0])
    start = equip_start(eq)
    end = start + 99
    c.args = [f"{start}-{end}"]
    await del_cmd(u, c)

async def del_all_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE):
    if not await _ensure_connected(u):
        return
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("–î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å—ë", callback_data="delall:yes"),
         InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="delall:no")]
    ])
    await u.message.reply_text("‚ö†Ô∏è –¢–æ—á–Ω–æ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –ª–∏–Ω–∏–∏?", reply_markup=kb)

async def add_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE):
    if not c.args:
        await u.message.reply_text(
            "–§–æ—Ä–º–∞—Ç—ã:\n"
            "<code>/add &lt;ext&gt; [–∏–º—è]</code>\n"
            "<code>/add &lt;start-end&gt; [–ø—Ä–µ—Ñ–∏–∫—Å_–∏–º–µ–Ω–∏]</code>\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "<code>/add 101</code>\n"
            "<code>/add 101 –û—Ñ–∏—Å –ö–∏–µ–≤</code>\n"
            "<code>/add 101-105 –ü—Ä–æ–¥–∞–∂–∏</code>"
        )
        return
    if not await _ensure_connected(u):
        return

    fb = fb_from_session(u.effective_chat.id)
    arg0 = c.args[0]
    name_tail = " ".join(c.args[1:]).strip()
    try:
        await u.message.chat.send_action(ChatAction.TYPING)

        targets = parse_targets(arg0) if "-" in arg0 else [arg0]
        total = len(targets)
        notice = await u.message.reply_text(f"‚è≥ –î–æ–±–∞–≤–ª—è—é –ª–∏–Ω–∏–∏‚Ä¶ (0/{total})")

        by_ext, name_set, name_ok = fb.fetch_ext_index()
        existing_exts = set(by_ext.keys())

        created, skipped_ext, skipped_name = [], [], []
        name_check_warn = False

        processed = 0
        for raw in targets:
            ext = str(int(raw))
            cand_name = (f"{name_tail} {ext}" if "-" in arg0 else name_tail) if name_tail else ext

            if ext in existing_exts:
                skipped_ext.append(ext)
            elif name_ok and cand_name.strip().lower() in name_set:
                skipped_name.append(f"{ext} ({cand_name})")
            else:
                if not name_ok:
                    name_check_warn = True
                fb.create_one(int(ext), cand_name)
                secret = secrets.token_hex(16)
                fb.set_ext_password(ext, secret)
                created.append(ext)
                existing_exts.add(ext)
                if name_ok and cand_name.strip():
                    name_set.add(cand_name.strip().lower())

            processed += 1
            if processed % 5 == 0 or processed == total:
                try:
                    await notice.edit_text(f"‚è≥ –î–æ–±–∞–≤–ª—è—é –ª–∏–Ω–∏–∏‚Ä¶ ({processed}/{total})")
                except Exception:
                    pass
            await asyncio.sleep(0)

        parts = []
        if created:
            parts.append("‚úÖ –°–æ–∑–¥–∞–Ω–æ: " + ", ".join(created))
        if skipped_ext:
            parts.append("‚Ü©Ô∏è –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç EXT: " + ", ".join(skipped_ext))
        if skipped_name:
            parts.append("üîÅ –î—É–±–ª–∏ –∏–º—ë–Ω: " + ", ".join(skipped_name))
        if name_check_warn:
            parts.append("‚ÑπÔ∏è –ò–º—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å (—Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–¥–∞—ë—Ç –∏–º–µ–Ω–∞).")
        if not parts:
            parts.append("–ù–µ—á–µ–≥–æ –¥–µ–ª–∞—Ç—å.")
        await u.message.reply_text("\n".join(parts))

        if created:
            try:
                try:
                    await notice.edit_text("üîÑ –ü—Ä–∏–º–µ–Ω—è—é –∫–æ–Ω—Ñ–∏–≥ (Apply Config)‚Ä¶")
                except Exception:
                    pass
                fb.apply_config()
                try:
                    await notice.edit_text("‚úÖ –ö–æ–Ω—Ñ–∏–≥ –ø—Ä–∏–º–µ–Ω—ë–Ω. –û–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–æ–∫‚Ä¶")
                except Exception:
                    pass
            except Exception as e:
                await u.message.reply_text(f"‚ö†Ô∏è Apply Config –Ω–µ —É–¥–∞–ª–æ—Å—å: <code>{escape(str(e))}</code>")

        pairs = fb.fetch_all_extensions()
        c.user_data["__last_pairs"] = pairs
        page_items, page, pages = _slice_pairs(pairs, page=0)
        await u.message.reply_text(
            _list_page_text(clean_url(fb.base_url), page_items),
            reply_markup=_list_nav_kb(page, pages)
        )
    except Exception as e:
        await u.message.reply_text(f"–û—à–∏–±–∫–∞ /add: <code>{escape(str(e))}</code>")

async def add_inbound_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE):
    """
    /add_inbound 414
    /add_inbound 414-420
    –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ EXT —Å–æ–∑–¥–∞—ë–º inbound route:
    Description=sim{ext}, DID={ext}, Destination -> Extension {ext}
    """
    if not c.args:
        await u.message.reply_text(
            "–§–æ—Ä–º–∞—Ç—ã:\n"
            "<code>/add_inbound &lt;ext&gt;</code>\n"
            "<code>/add_inbound &lt;start-end&gt;</code>\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "<code>/add_inbound 414</code>\n"
            "<code>/add_inbound 401-418</code>\n"
            "–ú–∞—Ä—à—Ä—É—Ç —Å–æ–∑–¥–∞—ë—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ EXT —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
        )
        return
    if not await _ensure_connected(u):
        return

    fb = fb_from_session(u.effective_chat.id)
    arg0 = " ".join(c.args)
    targets = parse_targets(arg0)

    try:
        await u.message.chat.send_action(ChatAction.TYPING)

        by_ext, _, _ = fb.fetch_ext_index()
        existing_exts = set(by_ext.keys())

        todo = [x for x in targets if x in existing_exts]
        missing = [x for x in targets if x not in existing_exts]

        total = len(todo)
        if total == 0:
            msg = ["–ù–µ—á–µ–≥–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å."]
            if missing:
                msg.append("‚Ü©Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ—Ç —Ç–∞–∫–∏—Ö EXT): " + ", ".join(missing))
            await u.message.reply_text("\n".join(msg))
            return

        notice = await u.message.reply_text(f"‚è≥ –î–æ–±–∞–≤–ª—è—é Inbound Routes‚Ä¶ (0/{total})")

        ok, skipped_exists, failed = [], [], []
        for i, ext in enumerate(todo, 1):
            try:
                fb.create_inbound_route(did=ext, description=f"sim{ext}", ext=ext)
                ok.append(ext)
            except AlreadyExists:
                skipped_exists.append(ext)
            except Exception as e:
                failed.append(f"{ext} ({str(e)[:80]})")

            if i % 5 == 0 or i == total:
                try:
                    await notice.edit_text(f"‚è≥ –î–æ–±–∞–≤–ª—è—é Inbound Routes‚Ä¶ ({i}/{total})")
                except Exception:
                    pass
            await asyncio.sleep(0)

        parts = []
        if ok:
            parts.append("‚úÖ –°–æ–∑–¥–∞–Ω–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤: " + ", ".join(ok))
        if skipped_exists:
            parts.append("‚Ü©Ô∏è –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç: " + ", ".join(skipped_exists))
        if missing:
            parts.append("‚Ü©Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ—Ç —Ç–∞–∫–∏—Ö EXT): " + ", ".join(missing))
        if failed:
            parts.append("‚ùå –û—à–∏–±–∫–∏: " + ", ".join(failed))
        await u.message.reply_text("\n".join(parts) if parts else "–ù–µ—á–µ–≥–æ –¥–µ–ª–∞—Ç—å.")

        if ok:
            try:
                try:
                    await notice.edit_text("üîÑ –ü—Ä–∏–º–µ–Ω—è—é –∫–æ–Ω—Ñ–∏–≥ (Apply Config)‚Ä¶")
                except Exception:
                    pass
                fb.apply_config()
                try:
                    await notice.edit_text("‚úÖ –ö–æ–Ω—Ñ–∏–≥ –ø—Ä–∏–º–µ–Ω—ë–Ω.")
                except Exception:
                    pass
            except Exception as e:
                await u.message.reply_text(f"‚ö†Ô∏è Apply Config –Ω–µ —É–¥–∞–ª–æ—Å—å: <code>{escape(str(e))}</code>")

    except Exception as e:
        await u.message.reply_text(f"–û—à–∏–±–∫–∞ /add_inbound: <code>{escape(str(e))}</code>")

async def del_inbound_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE):
    """
    /del_inbound <ext>
    –£–¥–∞–ª—è–µ—Ç inbound route –ø–æ extension (DID).
    """
    if not c.args:
        await u.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/del_inbound &lt;ext&gt;</code>")
        return
    if not await _ensure_connected(u):
        return

    fb = fb_from_session(u.effective_chat.id)
    number = c.args[0]

    try:
        await u.message.chat.send_action(ChatAction.TYPING)

        routes = fb.list_inbound_routes()
        route = next((r for r in routes if r["extension"] == number), None)
        if not route:
            await u.message.reply_text(f"‚ùå –ú–∞—Ä—à—Ä—É—Ç —Å DID {number} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        notice = await u.message.reply_text(f"‚è≥ –£–¥–∞–ª—è—é Inbound Route {number}‚Ä¶")

        res = fb.delete_inbound_route(route["id"])
        status = res.get("status")
        msg = res.get("message") or ""

        # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—Ç–∞—Ç—É—Å
        status_str = str(status).lower() if status is not None else ""

        if status_str == "ok" or status_str == "true" or "successfully" in msg.lower():
            await notice.edit_text(f"‚úÖ –ú–∞—Ä—à—Ä—É—Ç {number} —É–¥–∞–ª—ë–Ω. üîÑ –ü—Ä–∏–º–µ–Ω—è—é –∫–æ–Ω—Ñ–∏–≥‚Ä¶")

            try:
                fb.apply_config()
                await notice.edit_text(f"‚úÖ –ú–∞—Ä—à—Ä—É—Ç {number} —É–¥–∞–ª—ë–Ω.\n‚úÖ –ö–æ–Ω—Ñ–∏–≥ –ø—Ä–∏–º–µ–Ω—ë–Ω.")
            except Exception as e:
                await notice.edit_text(
                    f"‚úÖ –ú–∞—Ä—à—Ä—É—Ç {number} —É–¥–∞–ª—ë–Ω.\n‚ö†Ô∏è Apply Config –Ω–µ —É–¥–∞–ª–æ—Å—å: {escape(str(e))}"
                )
        else:
            await notice.edit_text(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {number}: {msg or res}")

    except Exception as e:
        await u.message.reply_text(f"–û—à–∏–±–∫–∞ /del_inbound: <code>{escape(str(e))}</code>")



async def reconnect_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE):
    if not await _ensure_connected(u):
        return
    try:
        s = SESS.get(u.effective_chat.id)
        fb = FreePBX(s["base_url"], s["client_id"], s["client_secret"], verify=s["verify"])
        fb.ensure_token()
        s["token"] = fb.token
        s["token_exp"] = fb.token_exp
        await u.message.reply_text("üîÅ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.")
    except Exception as e:
        await u.message.reply_text(f"–û—à–∏–±–∫–∞ reconnect: <code>{escape(str(e))}</code>")

async def ping_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE):
    if not await _ensure_connected(u):
        return
    try:
        fb = fb_from_session(u.effective_chat.id)
        fb.ensure_token()
        _ = fb.gql("query { fetchAllExtensions { extension { extensionId } } }")
        await u.message.reply_text("‚úÖ OK")
    except Exception as e:
        await u.message.reply_text(f"‚ùå Unauthorized / –æ—à–∏–±–∫–∞: <code>{escape(str(e))}</code>")

async def whoami_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE):
    if not await _ensure_connected(u):
        return
    s = SESS.get(u.effective_chat.id)
    ttl = max(0, int(s.get("token_exp", 0) - time.time()))
    await u.message.reply_text(
        "üë§ –¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è\n"
        f"URL: <code>{s['base_url']}</code>\n"
        f"Client ID: <code>{s['client_id']}</code>\n"
        f"TLS verify: <code>{s['verify']}</code>\n"
        f"–¢–æ–∫–µ–Ω –∂–∏–≤ –µ—â—ë: <code>{ttl} —Å–µ–∫</code>"
    )

async def logout_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE):
    SESS.pop(u.effective_chat.id, None)
    c.user_data.clear()
    await u.message.reply_text("üö™ –°–µ—Å—Å–∏—è —Å–±—Ä–æ—à–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /connect.")

async def list_routes_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE):
    if not await _ensure_connected(u):
        return
    fb = fb_from_session(u.effective_chat.id)
    try:
        routes = fb.list_inbound_routes()
        if not routes:
            await u.message.reply_text("–ú–∞—Ä—à—Ä—É—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        lines = ["DID | Description | ID"]
        for r in routes:
            did = r.get("extension")
            desc = r.get("description")
            rid = r.get("id")
            lines.append(f"{did} | {desc} | {rid}")
        await u.message.reply_text("\n".join(lines))
    except Exception as e:
        await u.message.reply_text(f"–û—à–∏–±–∫–∞ /list_routes: <code>{escape(str(e))}</code>")

async def gql_fields_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE):
    if not await _ensure_connected(u):
        return
    fb = fb_from_session(u.effective_chat.id)
    try:
        fields = fb.list_query_fields()
        await u.message.reply_text("–î–æ—Å—Ç—É–ø–Ω—ã–µ Query:\n" + "\n".join(fields))
    except Exception as e:
        await u.message.reply_text(f"–û—à–∏–±–∫–∞ introspect: {e}")
        
async def gql_mutations_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE):
    if not await _ensure_connected(u):
        return
    fb = fb_from_session(u.effective_chat.id)
    try:
        muts = fb.list_mutations()
        await u.message.reply_text("–î–æ—Å—Ç—É–ø–Ω—ã–µ Mutation:\n" + "\n".join(muts))
    except Exception as e:
        await u.message.reply_text(f"–û—à–∏–±–∫–∞ introspect: {e}")


# ===== Lifecycle hook (used in main.py via .post_init(on_startup)) =====
async def on_startup(app):
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –ù–∞–±–µ—Ä–∏ /help –≤ Telegram –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.")  # <-- –≤–æ—Ç —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞
    log.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏: /help")
    if ADMIN_CHAT_ID:
        try:
            await app.bot.send_message(
                int(ADMIN_CHAT_ID),
                "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –ù–∞–ø–∏—à–∏—Ç–µ /help."
            )
        except Exception as e:
            log.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {e}")
